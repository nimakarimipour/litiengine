====================
Type='RETURN_NULLABLE', message='returning @Nullable expression from method with @NonNull return type'
/home/nima/Developer/nullness-benchmarks/litiengine/src/de/gurkenlabs/litiengine/entities/CollisionEntity.java:92
    return this.collisionBox;
Log:
---NullAway.lambda$resolveRemainingErrors$17---
==============================
---NullAway.lambda$resolveRemainingErrors$17---
TOP LEVEL CALL TO FIX ERROR: Type='RETURN_NULLABLE', message='returning @Nullable expression from method with @NonNull return type'
/home/nima/Developer/nullness-benchmarks/litiengine/src/de/gurkenlabs/litiengine/entities/CollisionEntity.java:92
    return this.collisionBox;
---ChatGPT.ask---
Asking ChatGPT:
I want to resolve a warning reported by NullAway.
The error is of the type of "RETURN_NULLABLE" and the full error message is: "returning @Nullable expression from method with @NonNull return type".
The line with the error is: "    return this.collisionBox;".

The error is within "the method: getCollisionBox()" and the code surrounding the error is:
```java
package de.gurkenlabs.litiengine.entities;

import de.gurkenlabs.litiengine.Align;
import de.gurkenlabs.litiengine.Game;
import de.gurkenlabs.litiengine.Valign;
import de.gurkenlabs.litiengine.environment.tilemap.IMapObject;
import de.gurkenlabs.litiengine.environment.tilemap.MapObjectProperty;
import de.gurkenlabs.litiengine.environment.tilemap.TmxProperty;
import de.gurkenlabs.litiengine.physics.Collision;
import de.gurkenlabs.litiengine.physics.CollisionEvent;
import de.gurkenlabs.litiengine.tweening.TweenType;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.util.Collection;
import java.util.concurrent.ConcurrentHashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.annotation.Nullable;

@CollisionInfo(collision = true)
public abstract class CollisionEntity extends Entity implements ICollisionEntity {
  private static final Logger log = Logger.getLogger(CollisionEntity.class.getName());

  private static final double HEIGHT_FACTOR = 0.4;

  private static final double WIDTH_FACTOR = 0.4;

  private final Collection<CollisionListener> collisionListener = ConcurrentHashMap.newKeySet();

  @TmxProperty(name = MapObjectProperty.COLLISION_ALIGN)
  private Align align;

  @TmxProperty(name = MapObjectProperty.COLLISION)
  private boolean collision;

  @TmxProperty(name = MapObjectProperty.COLLISIONBOX_HEIGHT)
  private double collisionBoxHeight;

  @TmxProperty(name = MapObjectProperty.COLLISIONBOX_WIDTH)
  private double collisionBoxWidth;

  @TmxProperty(name = MapObjectProperty.COLLISION_VALIGN)
  private Valign valign;

  @TmxProperty(name = MapObjectProperty.COLLISION_TYPE)
  private Collision collisionType;

  @Nullable private Rectangle2D collisionBox;

  protected CollisionEntity() {
    super();
    final CollisionInfo info = this.getClass().getAnnotation(CollisionInfo.class);
    this.collisionBoxWidth = info.collisionBoxWidth();
    this.collisionBoxHeight = info.collisionBoxHeight();
    this.collision = info.collision();
    this.valign = info.valign();
    this.align = info.align();
    this.collisionType = info.collisionType();
    this.refreshCollisionBox();
  }

  public static Rectangle2D getCollisionBox(
      final Point2D location,
      final double entityWidth,
      final double entityHeight,
      final double collisionBoxWidth,
      final double collisionBoxHeight,
      final Align align,
      final Valign valign) {
    double x = location.getX() + align.getLocation(entityWidth, collisionBoxWidth);
    double y = location.getY() + valign.getLocation(entityHeight, collisionBoxHeight);
    return new Rectangle2D.Double(x, y, collisionBoxWidth, collisionBoxHeight);
  }

  @Override
  public boolean canCollideWith(final ICollisionEntity otherEntity) {
    return true;
  }

  @Override
  public Align getCollisionBoxAlign() {
    return this.align;
  }

  /**
   * Gets the collision box.
   *
   * @return the collision box
   */
  @Override
  public Rectangle2D getCollisionBox() {
    return this.collisionBox;
```

Give me the fixed code snippet (ONLY THE METHOD REWRITE OF "getCollisionBox()") in XML format in <response> tag like the example below. I will apply the fix to my codebase.
Do not import any additional libraries or classes or java comments.
If you can provide the fixed code snippet, provide it in the following format and place the code snippet in the <code> tag within ```java block.
<response>
  <success>true</success>
  <code><![CDATA[
  ```java
  Your fixed code snippet here
  ```
    ]]>
  </code>
</response>

---ChatGPT.sendRequestToOpenAI---
Sending request to OpenAI...
---ChatGPT.sendRequestToOpenAI---
Response received from OpenAI.
---Response.<init>---
Creating Response:
```xml
<response>
  <success>true</success>
  <code><![CDATA[
  ```java
  @Override
  public Rectangle2D getCollisionBox() {
    if (this.collisionBox == null) {
      throw new IllegalStateException("Collision box has not been initialized");
    }
    return this.collisionBox;
  }
  ```
    ]]>
  </code>
</response>
```
---Response.<init>---
Response created:
@Override
  public Rectangle2D getCollisionBox() {
    if (this.collisionBox == null) {
      throw new IllegalStateException("Collision box has not been initialized");
    }
    return this.collisionBox;
  }
