====================
Type='DEREFERENCE_NULLABLE', message='dereferenced expression this.collisionBoxes.get(type) is @Nullable'
/home/nima/Developer/nullness-benchmarks/litiengine/src/de/gurkenlabs/litiengine/physics/PhysicsEngine.java:122
      this.collisionBoxes.get(type).clear();
Log:
---NullAway.lambda$resolveRemainingErrors$17---
==============================
---NullAway.lambda$resolveRemainingErrors$17---
TOP LEVEL CALL TO FIX ERROR: Type='DEREFERENCE_NULLABLE', message='dereferenced expression this.collisionBoxes.get(type) is @Nullable'
/home/nima/Developer/nullness-benchmarks/litiengine/src/de/gurkenlabs/litiengine/physics/PhysicsEngine.java:122
      this.collisionBoxes.get(type).clear();
---ChatGPT.ask---
Asking ChatGPT:
I want to resolve a warning reported by NullAway.
The error is of the type of "DEREFERENCE_NULLABLE" and the full error message is: "dereferenced expression this.collisionBoxes.get(type) is @Nullable".
The line with the error is: "      this.collisionBoxes.get(type).clear();".

The error is within "the method: clear()" and the code surrounding the error is:
```java
package de.gurkenlabs.litiengine.physics;

import de.gurkenlabs.litiengine.Direction;
import de.gurkenlabs.litiengine.Game;
import de.gurkenlabs.litiengine.IUpdateable;
import de.gurkenlabs.litiengine.entities.ICollisionEntity;
import de.gurkenlabs.litiengine.entities.IMobileEntity;
import de.gurkenlabs.litiengine.util.ArrayUtilities;
import de.gurkenlabs.litiengine.util.MathUtilities;
import de.gurkenlabs.litiengine.util.geom.GeometricUtilities;
import java.awt.Shape;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.function.Predicate;
import java.util.stream.Collectors;
import javax.annotation.Nullable;

/**
 * This class is used to hold all collision aware instances and static collision boxes. It is
 * responsible for resolving movement that respects the collision boxes in the game. This is
 * achieved by the <b>{@code move}</b> method group. <br>
 * The <b>{@code collides}</b> method group can detect a collision at a certain location, for
 * rectangles, or collision aware entities. Also, there's an overload that takes a {@code Line2D} to
 * perform a basic raycast check.
 */
public final class PhysicsEngine implements IUpdateable {
  @Nullable private Rectangle2D environmentBounds;

  private final Map<Collision, List<ICollisionEntity>> collisionEntities =
      new ConcurrentHashMap<>();
  private final Map<Collision, List<Rectangle2D>> collisionBoxes = new ConcurrentHashMap<>();

  /**
   * <b>You should never call this manually! Instead use the {@code Game.physics()} instance.</b>
   *
   * @see Game#physics()
   */
  public PhysicsEngine() {
    if (Game.physics() != null) {
      throw new UnsupportedOperationException(
          "Never initialize a PhysicsEngine manually. Use Game.physics() instead.");
    }

    this.collisionEntities.put(Collision.DYNAMIC, new CopyOnWriteArrayList<>());
    this.collisionEntities.put(Collision.STATIC, new CopyOnWriteArrayList<>());
    this.collisionEntities.put(Collision.ANY, new CopyOnWriteArrayList<>());

    this.collisionBoxes.put(Collision.DYNAMIC, new CopyOnWriteArrayList<>());
    this.collisionBoxes.put(Collision.STATIC, new CopyOnWriteArrayList<>());
    this.collisionBoxes.put(Collision.ANY, new CopyOnWriteArrayList<>());
  }

  /**
   * Adds the specified collision aware entity to the physics engine which will make it respect the
   * entity's collision box for upcoming calls.
   *
   * <p><i>If you add a {@code ICollisionEntiy} to your Environment, it will automatically be added
   * to the the PhysicsEngine. There is typically no need to call this explicitly.</i>
   *
   * @param entity The collision entity to be added.
   * @see ICollisionEntity#getCollisionBox()
   * @see PhysicsEngine#remove(ICollisionEntity)
   */
  public void add(final ICollisionEntity entity) {
    if (entity.getCollisionType() == null) {
      return;
    }

    switch (entity.getCollisionType()) {
      case DYNAMIC:
      case STATIC:
        this.collisionEntities.get(entity.getCollisionType()).add(entity);
        break;
      default:
        return;
    }

    this.collisionEntities.get(Collision.ANY).add(entity);
  }

  /**
   * Removes the specified entity from any collision processing. Typically this method is implicitly
   * called when an entity is removed from the current environment.
   *
   * @param entity The entity that is about to be removed.
   */
  public void remove(final ICollisionEntity entity) {
    if (entity.getCollisionType() == null) {
      return;
    }

    switch (entity.getCollisionType()) {
      case DYNAMIC:
      case STATIC:
        this.collisionEntities.get(entity.getCollisionType()).remove(entity);
        break;
      default:
        return;
    }

    this.collisionEntities.get(Collision.ANY).remove(entity);
  }

  /**
   * Clears all previously registered participants in the collision process from this instance. This
   * includes all entities, static collision boxes and the map boundaries.
   */
  public void clear() {
    for (Collision type : Collision.values()) {
      if (type == Collision.NONE) {
        continue;
      }

      this.collisionEntities.get(type).clear();
      this.collisionBoxes.get(type).clear();
    }

    this.setBounds(null);
```

Give me the fixed code snippet (ONLY THE METHOD REWRITE OF "clear()") in XML format in <response> tag like the example below. I will apply the fix to my codebase.
Do not import any additional libraries or classes or java comments.
If you can provide the fixed code snippet, provide it in the following format and place the code snippet in the <code> tag within ```java block.
<response>
  <success>true</success>
  <code><![CDATA[
  ```java
  Your fixed code snippet here
  ```
    ]]>
  </code>
</response>

---ChatGPT.sendRequestToOpenAI---
Sending request to OpenAI...
---ChatGPT.sendRequestToOpenAI---
Response received from OpenAI.
---Response.<init>---
Creating Response:
```xml
<response>
  <success>true</success>
  <code><![CDATA[
  ```java
  public void clear() {
    for (Collision type : Collision.values()) {
      if (type == Collision.NONE) {
        continue;
      }

      List<ICollisionEntity> entities = this.collisionEntities.get(type);
      if (entities != null) {
        entities.clear();
      }

      List<Rectangle2D> boxes = this.collisionBoxes.get(type);
      if (boxes != null) {
        boxes.clear();
      }
    }

    this.setBounds(null);
  }
  ```
  ]]>
  </code>
</response>
```
---Response.<init>---
Response created:
public void clear() {
    for (Collision type : Collision.values()) {
      if (type == Collision.NONE) {
        continue;
      }

      List<ICollisionEntity> entities = this.collisionEntities.get(type);
      if (entities != null) {
        entities.clear();
      }

      List<Rectangle2D> boxes = this.collisionBoxes.get(type);
      if (boxes != null) {
        boxes.clear();
      }
    }

    this.setBounds(null);
  }
