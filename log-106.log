====================
Type='DEREFERENCE_NULLABLE', message='dereferenced expression this.getTweens().get(target) is @Nullable'
/home/nima/Developer/nullness-benchmarks/litiengine/src/de/gurkenlabs/litiengine/tweening/TweenEngine.java:124
      this.getTweens().get(target).remove(type);
Log:
---NullAway.lambda$resolveRemainingErrors$17---
==============================
---NullAway.lambda$resolveRemainingErrors$17---
TOP LEVEL CALL TO FIX ERROR: Type='DEREFERENCE_NULLABLE', message='dereferenced expression this.getTweens().get(target) is @Nullable'
/home/nima/Developer/nullness-benchmarks/litiengine/src/de/gurkenlabs/litiengine/tweening/TweenEngine.java:124
      this.getTweens().get(target).remove(type);
---ChatGPT.ask---
Asking ChatGPT:
I want to resolve a warning reported by NullAway.
The error is of the type of "DEREFERENCE_NULLABLE" and the full error message is: "dereferenced expression this.getTweens().get(target) is @Nullable".
The line with the error is: "      this.getTweens().get(target).remove(type);".

The error is within "the method: remove(de.gurkenlabs.litiengine.tweening.Tweenable,de.gurkenlabs.litiengine.tweening.TweenType)" and the code surrounding the error is:
```java
package de.gurkenlabs.litiengine.tweening;

import de.gurkenlabs.litiengine.Game;
import de.gurkenlabs.litiengine.ILaunchable;
import de.gurkenlabs.litiengine.IUpdateable;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import javax.annotation.Nullable;

/**
 * The TweenEngine is the central manager for Tweens. It tracks all current Tween instances and
 * applies their {@code TweenEquation} with every {@code GameLoop} update.
 */
public class TweenEngine implements IUpdateable, ILaunchable {
  private final Map<Tweenable, Map<TweenType, Tween>> tweens;

  /** Instantiates a new {@code TweenEngine}. */
  public TweenEngine() {
    this.tweens = new ConcurrentHashMap<>();
  }

  /**
   * Begins a new Tween. If a Tween is already registered for the {@code Tweenable} with the given
   * {@code TweenType}, it is restarted with the given duration.
   *
   * @param target the {@code Tweenable} target object
   * @param type the {@code TweenType} determining which values of the target object will be
   *     modified.
   * @param duration the duration of the Tween in milliseconds.
   * @return the Tween instance
   */
  public Tween begin(final Tweenable target, final TweenType type, final int duration) {
    Tween tween = this.getTween(target, type);
    if (tween == null) {
      tween = new Tween(target, type, duration).ease(TweenFunction.QUAD_INOUT);
      this.getTweens().get(target).put(type, tween);
    } else {
      tween.setDuration(duration);
    }
    tween.begin();
    return tween;
  }

  /**
   * Attempts to get a previously registered {@code Tween} or registers a new one.
   *
   * @param target the {@code Tweenable} target object
   * @param type the {@code TweenType} determining which values of the target object will be
   *     modified.
   * @return the Tween instance
   */
  @Nullable
  public Tween getTween(final Tweenable target, final TweenType type) {
    if (this.getTweens().get(target) == null) {
      this.getTweens().put(target, new ConcurrentHashMap<>());
    }

    return this.getTweens().get(target).get(type);
  }

  /**
   * Gets the map of registered {@code Tweens}.
   *
   * @return the map of registered {@code Tweens}.
   */
  public Map<Tweenable, Map<TweenType, Tween>> getTweens() {
    return this.tweens;
  }

  /**
   * Looks for a registered Tween instance with the given target and type. Attempts to stop the
   * Tween and reset the {@code Tweenable} values to the start values.
   *
   * @param target the {@code Tweenable} target object
   * @param type the {@code TweenType} determining which values of the target object will be
   *     modified.
   * @return the Tween instance
   */
  @Nullable
  public Tween reset(final Tweenable target, final TweenType type) {
    final Tween tween = this.getTween(target, type);
    if (tween != null) {
      tween.stop();
      tween.reset();
    }
    return tween;
  }

  /**
   * Looks for a registered Tween instance with the given target and type. Attempts to resume the
   * Tween if it was stopped.
   *
   * @param target the {@code Tweenable} target object
   * @param type the {@code TweenType} determining which values of the target object will be
   *     modified.
   * @return the Tween instance
   */
  @Nullable
  public Tween resume(final Tweenable target, final TweenType type) {
    final Tween tween = this.getTween(target, type);
    if (tween != null) {
      tween.resume();
    }
    return tween;
  }

  /** Start. */
  @Override
  public void start() {
    Game.loop().attach(this);
  }

  /**
   * Looks for a registered Tween instance with the given target and type. Attempts to remove the
   * Tween from the TweenEngine.
   *
   * @param target the {@code Tweenable} target object
   * @param type the {@code TweenType} determining which values of the target object will be
   *     modified.
   */
  public void remove(final Tweenable target, final TweenType type) {
    final Tween tween = this.getTween(target, type);
    if (tween != null) {
      this.getTweens().get(target).remove(type);
    }
```

Give me the fixed code snippet (ONLY THE METHOD REWRITE OF "remove(de.gurkenlabs.litiengine.tweening.Tweenable,de.gurkenlabs.litiengine.tweening.TweenType)") in XML format in <response> tag like the example below. I will apply the fix to my codebase.
Do not import any additional libraries or classes or java comments.
If you can provide the fixed code snippet, provide it in the following format and place the code snippet in the <code> tag within ```java block.
<response>
  <success>true</success>
  <code><![CDATA[
  ```java
  Your fixed code snippet here
  ```
    ]]>
  </code>
</response>

---ChatGPT.sendRequestToOpenAI---
Sending request to OpenAI...
---ChatGPT.sendRequestToOpenAI---
Response received from OpenAI.
---Response.<init>---
Creating Response:
```xml
<response>
  <success>true</success>
  <code><![CDATA[
  ```java
  public void remove(final Tweenable target, final TweenType type) {
    Map<TweenType, Tween> targetTweens = this.getTweens().get(target);
    if (targetTweens != null) {
      targetTweens.remove(type);
    }
  }
  ```
  ]]>
  </code>
</response>
```
---Response.<init>---
Response created:
public void remove(final Tweenable target, final TweenType type) {
    Map<TweenType, Tween> targetTweens = this.getTweens().get(target);
    if (targetTweens != null) {
      targetTweens.remove(type);
    }
  }
