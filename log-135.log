====================
Type='DEREFERENCE_NULLABLE', message='dereferenced expression tween.getEquation() is @Nullable'
/home/nima/Developer/nullness-benchmarks/litiengine/src/de/gurkenlabs/litiengine/tweening/TweenEngine.java:169
                  + tween.getEquation().compute(elapsed / (float) tween.getDuration())
Log:
11:48:22.779 TRACE edu.ucr.cs.riple.core.checkers.nullaway.NullAway.lambda$resolveRemainingErrors$19
==============================
11:48:22.779 TRACE edu.ucr.cs.riple.core.checkers.nullaway.NullAway.lambda$resolveRemainingErrors$19
CHATGPT.COUNT = 1
11:48:22.779 TRACE edu.ucr.cs.riple.core.checkers.nullaway.NullAway.lambda$resolveRemainingErrors$19
CHATGPT.PROMPTS SIZE = 1
11:48:22.779 TRACE edu.ucr.cs.riple.core.checkers.nullaway.NullAway.lambda$resolveRemainingErrors$19
Both set to 0 and cleared 0
11:48:22.779 TRACE edu.ucr.cs.riple.core.checkers.nullaway.NullAway.lambda$resolveRemainingErrors$19
135 : TOP LEVEL CALL TO FIX ERROR: Type='DEREFERENCE_NULLABLE', message='dereferenced expression tween.getEquation() is @Nullable'
/home/nima/Developer/nullness-benchmarks/litiengine/src/de/gurkenlabs/litiengine/tweening/TweenEngine.java:169
                  + tween.getEquation().compute(elapsed / (float) tween.getDuration())
11:48:24.378 TRACE edu.ucr.cs.riple.core.checkers.nullaway.codefix.ChatGPT.ask
Asking ChatGPT:
I want to resolve a warning reported by NullAway.
The error is of the type of "DEREFERENCE_NULLABLE" and the full error message is: "dereferenced expression tween.getEquation() is @Nullable".
The line with the error is: "                  + tween.getEquation().compute(elapsed / (float) tween.getDuration())".

The error is within "the method: update()" and the code surrounding the error is:
```java
    Game.loop().detach(this);
  }

  /** Updates all registered Tweens by applying the {@code TweenEquation}. */
  @Override
  public void update() {
    for (final Tweenable target : this.getTweens().keySet()) {
      for (final Tween tween : this.getTweens().get(target).values()) {
        if (tween.hasStopped()) {
          continue;
        }
        final long elapsed = Game.time().since(tween.getStartTime());
        if (elapsed >= tween.getDuration()) {
          tween.stop();
          continue;
        }
        final float[] currentValues = new float[tween.getTargetValues().length];
        for (int i = 0; i < tween.getTargetValues().length; i++) {
          currentValues[i] =
              tween.getStartValues()[i]
                  + tween.getEquation().compute(elapsed / (float) tween.getDuration())
                      * (tween.getTargetValues()[i] - tween.getStartValues()[i]);
        }
        tween.getTarget().setTweenValues(tween.getType(), currentValues);
      }
    }
  }
}
```

Give me the fixed code snippet (ONLY THE METHOD REWRITE OF "update()") in XML format in <response> tag like the example below. I will apply the fix to my codebase.
Do not import any additional libraries or classes or java comments.
If you can provide the fixed code snippet, provide it in the following format and place the code snippet in the <code> tag within ```java block.
<response>
  <success>true</success>
  <code><![CDATA[
  ```java
  Your fixed code snippet here
  ```
    ]]>
  </code>
</response>

11:48:24.378 TRACE edu.ucr.cs.riple.core.checkers.nullaway.codefix.ChatGPT.ask
Retrieving response from cache
11:48:24.378 TRACE edu.ucr.cs.riple.core.checkers.nullaway.codefix.Response.tryCreate
Trying to create Response:
```xml
<response>
  <success>true</success>
  <code><![CDATA[
  ```java
  @Override
  public void update() {
    for (final Tweenable target : this.getTweens().keySet()) {
      for (final Tween tween : this.getTweens().get(target).values()) {
        if (tween.hasStopped()) {
          continue;
        }
        final long elapsed = Game.time().since(tween.getStartTime());
        if (elapsed >= tween.getDuration()) {
          tween.stop();
          continue;
        }
        final TweenEquation equation = tween.getEquation();
        if (equation == null) {
          continue; 
        }
        final float[] currentValues = new float[tween.getTargetValues().length];
        for (int i = 0; i < tween.getTargetValues().length; i++) {
          currentValues[i] =
              tween.getStartValues()[i]
                  + equation.compute(elapsed / (float) tween.getDuration())
                      * (tween.getTargetValues()[i] - tween.getStartValues()[i]);
        }
        tween.getTarget().setTweenValues(tween.getType(), currentValues);
      }
    }
  }
  ```
    ]]>
  </code>
</response>
```
11:48:24.379 TRACE edu.ucr.cs.riple.core.checkers.nullaway.codefix.Response.<init>
Creating Response:
```xml
<response>
  <success>true</success>
  <code><![CDATA[
  ```java
  @Override
  public void update() {
    for (final Tweenable target : this.getTweens().keySet()) {
      for (final Tween tween : this.getTweens().get(target).values()) {
        if (tween.hasStopped()) {
          continue;
        }
        final long elapsed = Game.time().since(tween.getStartTime());
        if (elapsed >= tween.getDuration()) {
          tween.stop();
          continue;
        }
        final TweenEquation equation = tween.getEquation();
        if (equation == null) {
          continue; 
        }
        final float[] currentValues = new float[tween.getTargetValues().length];
        for (int i = 0; i < tween.getTargetValues().length; i++) {
          currentValues[i] =
              tween.getStartValues()[i]
                  + equation.compute(elapsed / (float) tween.getDuration())
                      * (tween.getTargetValues()[i] - tween.getStartValues()[i]);
        }
        tween.getTarget().setTweenValues(tween.getType(), currentValues);
      }
    }
  }
  ```
    ]]>
  </code>
</response>
```
11:48:24.379 TRACE edu.ucr.cs.riple.core.checkers.nullaway.codefix.Response.<init>
Response created:
@Override
  public void update() {
    for (final Tweenable target : this.getTweens().keySet()) {
      for (final Tween tween : this.getTweens().get(target).values()) {
        if (tween.hasStopped()) {
          continue;
        }
        final long elapsed = Game.time().since(tween.getStartTime());
        if (elapsed >= tween.getDuration()) {
          tween.stop();
          continue;
        }
        final TweenEquation equation = tween.getEquation();
        if (equation == null) {
          continue; 
        }
        final float[] currentValues = new float[tween.getTargetValues().length];
        for (int i = 0; i < tween.getTargetValues().length; i++) {
          currentValues[i] =
              tween.getStartValues()[i]
                  + equation.compute(elapsed / (float) tween.getDuration())
                      * (tween.getTargetValues()[i] - tween.getStartValues()[i]);
        }
        tween.getTarget().setTweenValues(tween.getType(), currentValues);
      }
    }
  }
