====================
Type='RETURN_NULLABLE', message='returning @Nullable expression from method with @NonNull return type'
/home/nima/Developer/nullness-benchmarks/litiengine/src/de/gurkenlabs/litiengine/environment/tilemap/xml/Tile.java:165
    return this.tilesetEntry;
Log:
---NullAway.lambda$resolveRemainingErrors$17---
==============================
---NullAway.lambda$resolveRemainingErrors$17---
TOP LEVEL CALL TO FIX ERROR: Type='RETURN_NULLABLE', message='returning @Nullable expression from method with @NonNull return type'
/home/nima/Developer/nullness-benchmarks/litiengine/src/de/gurkenlabs/litiengine/environment/tilemap/xml/Tile.java:165
    return this.tilesetEntry;
---ChatGPT.ask---
Asking ChatGPT:
I want to resolve a warning reported by NullAway.
The error is of the type of "RETURN_NULLABLE" and the full error message is: "returning @Nullable expression from method with @NonNull return type".
The line with the error is: "    return this.tilesetEntry;".

The error is within "the method: getTilesetEntry()" and the code surrounding the error is:
```java
package de.gurkenlabs.litiengine.environment.tilemap.xml;

import de.gurkenlabs.litiengine.environment.tilemap.ICustomProperty;
import de.gurkenlabs.litiengine.environment.tilemap.ITile;
import de.gurkenlabs.litiengine.environment.tilemap.ITilesetEntry;
import java.awt.Point;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.util.Collections;
import java.util.Objects;
import javax.annotation.Nullable;
import javax.xml.bind.Marshaller;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;

@XmlAccessorType(XmlAccessType.FIELD)
public class Tile extends CustomPropertyProvider implements ITile {
  public static final int NONE = 0;
  public static final Tile EMPTY = new Tile(NONE);
  protected static final int FLIPPED_HORIZONTALLY_FLAG = 0x80000000;
  protected static final int FLIPPED_VERTICALLY_FLAG = 0x40000000;
  protected static final int FLIPPED_DIAGONALLY_FLAG = 0x20000000;
  private static final AffineTransform TX_DIAGONAL_FLIP =
      new AffineTransform(0.0, 1.0, 1.0, 0.0, 0.0, 0.0);

  @Nullable @XmlAttribute private Integer gid;

  @Nullable private transient Point tileCoordinate;

  @Nullable private transient ITilesetEntry tilesetEntry;

  private transient boolean flippedDiagonally;
  private transient boolean flippedHorizontally;
  private transient boolean flippedVertically;
  private transient boolean flipped;

  /** Instantiates a new {@code Tile} instance. */
  public Tile() {}

  /**
   * Instantiates a new {@code Tile} instance with the same attributes as a given {@code Tile}.
   *
   * @param original The original tile from which the values will be copied to this new instance.
   */
  public Tile(Tile original) {
    this.flipped = original.isFlipped();
    this.flippedDiagonally = original.isFlippedDiagonally();
    this.flippedHorizontally = original.isFlippedHorizontally();
    this.flippedVertically = original.isFlippedVertically();
    this.tilesetEntry = original.getTilesetEntry();
    this.gid = original.getGridId();
    this.tileCoordinate = original.getTileCoordinate();
  }

  /**
   * Instantiates a new {@code Tile} instance.
   *
   * @param gidBitmask The grid ID bitmask used to identify flags of this instance.
   * @see Tile#FLIPPED_HORIZONTALLY_FLAG
   * @see Tile#FLIPPED_DIAGONALLY_FLAG
   * @see Tile#FLIPPED_VERTICALLY_FLAG
   */
  public Tile(int gidBitmask) {
    // Clear the flags
    this.flippedDiagonally = (gidBitmask & FLIPPED_DIAGONALLY_FLAG) != 0;
    this.flippedHorizontally = (gidBitmask & FLIPPED_HORIZONTALLY_FLAG) != 0;
    this.flippedVertically = (gidBitmask & FLIPPED_VERTICALLY_FLAG) != 0;

    this.flipped =
        this.isFlippedDiagonally() || this.isFlippedHorizontally() || this.isFlippedVertically();
    this.gid =
        gidBitmask
            & ~(FLIPPED_HORIZONTALLY_FLAG | FLIPPED_VERTICALLY_FLAG | FLIPPED_DIAGONALLY_FLAG);
  }

  @Override
  public boolean hasCustomProperty(String name) {
    return this.getTilesetEntry() == null
        ? super.hasCustomProperty(name)
        : this.getTilesetEntry().hasCustomProperty(name);
  }

  @Override
  public java.util.Map<String, ICustomProperty> getProperties() {
    return this.getTilesetEntry() == null
        ? Collections.emptyMap()
        : this.getTilesetEntry().getProperties();
  }

  @Override
  public void setProperties(@Nullable java.util.Map<String, ICustomProperty> props) {
    if (this.getTilesetEntry() == null) {
      super.setProperties(props);
    } else {
      this.getTilesetEntry().setProperties(props);
    }
  }

  @Override
  public boolean isFlippedDiagonally() {
    return this.flippedDiagonally;
  }

  @Override
  public boolean isFlippedHorizontally() {
    return this.flippedHorizontally;
  }

  @Override
  public boolean isFlippedVertically() {
    return this.flippedVertically;
  }

  @Override
  public boolean isFlipped() {
    return this.flipped;
  }

  @Nullable
  @Override
  public BufferedImage getImage() {
    if (this.tilesetEntry == null) { // happens if the tile is empty
      return null;
    }
    BufferedImage base = this.getTilesetEntry().getImage();
    if (!this.isFlipped()) {
      return base;
    }
    // save some overhead by doing all the reflection at once
    // affine transforms are confusing: this actually does represent the correct order
    AffineTransform tx = new AffineTransform();
    if (this.isFlippedHorizontally()) {
      tx.translate(base.getWidth(), 0.0);
      tx.scale(-1.0, 1.0);
    }
    if (this.isFlippedVertically()) {
      tx.translate(0.0, base.getHeight());
      tx.scale(1.0, -1.0);
    }
    if (this.isFlippedDiagonally()) {
      tx.concatenate(TX_DIAGONAL_FLIP);
    }
    return (new AffineTransformOp(tx, AffineTransformOp.TYPE_NEAREST_NEIGHBOR)).filter(base, null);
  }

  @Override
  public int getGridId() {
    if (this.gid == null) {
      return 0;
    }

    return this.gid;
  }

  @Nullable
  @Override
  public Point getTileCoordinate() {
    return this.tileCoordinate;
  }

  @Override
  public ITilesetEntry getTilesetEntry() {
    return this.tilesetEntry;
```

Give me the fixed code snippet (ONLY THE METHOD REWRITE OF "getTilesetEntry()") in XML format in <response> tag like the example below. I will apply the fix to my codebase.
Do not import any additional libraries or classes or java comments.
If you can provide the fixed code snippet, provide it in the following format and place the code snippet in the <code> tag within ```java block.
<response>
  <success>true</success>
  <code><![CDATA[
  ```java
  Your fixed code snippet here
  ```
    ]]>
  </code>
</response>

---ChatGPT.sendRequestToOpenAI---
Sending request to OpenAI...
---ChatGPT.sendRequestToOpenAI---
Response received from OpenAI.
---Response.<init>---
Creating Response:
```xml
<response>
  <success>true</success>
  <code><![CDATA[
  ```java
  @Override
  public ITilesetEntry getTilesetEntry() {
    if (this.tilesetEntry == null) {
      throw new IllegalStateException("TilesetEntry is null");
    }
    return this.tilesetEntry;
  }
  ```
    ]]>
  </code>
</response>
```
---Response.<init>---
Response created:
@Override
  public ITilesetEntry getTilesetEntry() {
    if (this.tilesetEntry == null) {
      throw new IllegalStateException("TilesetEntry is null");
    }
    return this.tilesetEntry;
  }
