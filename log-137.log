====================
Type='DEREFERENCE_NULLABLE', message='dereferenced expression compatibleImg is @Nullable'
/home/nima/Developer/nullness-benchmarks/litiengine/src/de/gurkenlabs/litiengine/util/io/ImageSerializer.java:41
      compatibleImg.createGraphics().drawImage(img, 0, 0, null);
Log:
11:48:32.214 TRACE edu.ucr.cs.riple.core.checkers.nullaway.NullAway.lambda$resolveRemainingErrors$19
==============================
11:48:32.214 TRACE edu.ucr.cs.riple.core.checkers.nullaway.NullAway.lambda$resolveRemainingErrors$19
CHATGPT.COUNT = 1
11:48:32.214 TRACE edu.ucr.cs.riple.core.checkers.nullaway.NullAway.lambda$resolveRemainingErrors$19
CHATGPT.PROMPTS SIZE = 1
11:48:32.214 TRACE edu.ucr.cs.riple.core.checkers.nullaway.NullAway.lambda$resolveRemainingErrors$19
Both set to 0 and cleared 0
11:48:32.214 TRACE edu.ucr.cs.riple.core.checkers.nullaway.NullAway.lambda$resolveRemainingErrors$19
137 : TOP LEVEL CALL TO FIX ERROR: Type='DEREFERENCE_NULLABLE', message='dereferenced expression compatibleImg is @Nullable'
/home/nima/Developer/nullness-benchmarks/litiengine/src/de/gurkenlabs/litiengine/util/io/ImageSerializer.java:41
      compatibleImg.createGraphics().drawImage(img, 0, 0, null);
11:48:33.733 TRACE edu.ucr.cs.riple.core.checkers.nullaway.codefix.ChatGPT.ask
Asking ChatGPT:
I want to resolve a warning reported by NullAway.
The error is of the type of "DEREFERENCE_NULLABLE" and the full error message is: "dereferenced expression compatibleImg is @Nullable".
The line with the error is: "      compatibleImg.createGraphics().drawImage(img, 0, 0, null);".

The error is within "the method: loadImage(java.lang.String)" and the code surrounding the error is:
```java
  private ImageSerializer() {
    throw new UnsupportedOperationException();
  }

  @Nullable
  public static BufferedImage loadImage(final String fileName) {
    final File file = new File(fileName);
    if (!file.exists()) {
      return null;
    }

    BufferedImage img;
    try {
      img = ImageIO.read(file);
      if (img == null) {
        return null;
      }

      final BufferedImage compatibleImg =
          Imaging.getCompatibleImage(img.getWidth(), img.getHeight());
      compatibleImg.createGraphics().drawImage(img, 0, 0, null);
      compatibleImg.createGraphics().dispose();

      return compatibleImg;
    } catch (final Exception e) {
      log.log(Level.SEVERE, e.getMessage(), e);
      return null;
    }
  }

  public static void saveImage(final String fileName, final BufferedImage image) {
    saveImage(fileName, image, ImageFormat.PNG);
  }

  public static void saveImage(
      final String fileName, final BufferedImage image, ImageFormat imageFormat) {
    try {
      final File file = new File(fileName);
      final String extension = FileUtilities.getExtension(fileName);
      Iterator<ImageWriter> iter = null;
```

Give me the fixed code snippet (ONLY THE METHOD REWRITE OF "loadImage(java.lang.String)") in XML format in <response> tag like the example below. I will apply the fix to my codebase.
Do not import any additional libraries or classes or java comments.
If you can provide the fixed code snippet, provide it in the following format and place the code snippet in the <code> tag within ```java block.
<response>
  <success>true</success>
  <code><![CDATA[
  ```java
  Your fixed code snippet here
  ```
    ]]>
  </code>
</response>

11:48:33.733 TRACE edu.ucr.cs.riple.core.checkers.nullaway.codefix.ChatGPT.ask
Retrieving response from cache
11:48:33.734 TRACE edu.ucr.cs.riple.core.checkers.nullaway.codefix.Response.tryCreate
Trying to create Response:
```xml
<response>
  <success>true</success>
  <code><![CDATA[
  ```java
  public static BufferedImage loadImage(final String fileName) {
    final File file = new File(fileName);
    if (!file.exists()) {
      return null;
    }

    BufferedImage img;
    try {
      img = ImageIO.read(file);
      if (img == null) {
        return null;
      }

      // The warning was caused by a potential null return, handling it
      final BufferedImage compatibleImg =
          Imaging.getCompatibleImage(img.getWidth(), img.getHeight());
      if (compatibleImg == null) {
        return null;
      }
      Graphics2D g2d = compatibleImg.createGraphics();
      try {
        g2d.drawImage(img, 0, 0, null);
      } finally {
        g2d.dispose();
      }

      return compatibleImg;
    } catch (final Exception e) {
      log.log(Level.SEVERE, e.getMessage(), e);
      return null;
    }
  }
  ```
    ]]>
  </code>
</response>
```
11:48:33.734 TRACE edu.ucr.cs.riple.core.checkers.nullaway.codefix.Response.<init>
Creating Response:
```xml
<response>
  <success>true</success>
  <code><![CDATA[
  ```java
  public static BufferedImage loadImage(final String fileName) {
    final File file = new File(fileName);
    if (!file.exists()) {
      return null;
    }

    BufferedImage img;
    try {
      img = ImageIO.read(file);
      if (img == null) {
        return null;
      }

      // The warning was caused by a potential null return, handling it
      final BufferedImage compatibleImg =
          Imaging.getCompatibleImage(img.getWidth(), img.getHeight());
      if (compatibleImg == null) {
        return null;
      }
      Graphics2D g2d = compatibleImg.createGraphics();
      try {
        g2d.drawImage(img, 0, 0, null);
      } finally {
        g2d.dispose();
      }

      return compatibleImg;
    } catch (final Exception e) {
      log.log(Level.SEVERE, e.getMessage(), e);
      return null;
    }
  }
  ```
    ]]>
  </code>
</response>
```
11:48:33.735 TRACE edu.ucr.cs.riple.core.checkers.nullaway.codefix.Response.<init>
Response created:
public static BufferedImage loadImage(final String fileName) {
    final File file = new File(fileName);
    if (!file.exists()) {
      return null;
    }

    BufferedImage img;
    try {
      img = ImageIO.read(file);
      if (img == null) {
        return null;
      }

      // The warning was caused by a potential null return, handling it
      final BufferedImage compatibleImg =
          Imaging.getCompatibleImage(img.getWidth(), img.getHeight());
      if (compatibleImg == null) {
        return null;
      }
      Graphics2D g2d = compatibleImg.createGraphics();
      try {
        g2d.drawImage(img, 0, 0, null);
      } finally {
        g2d.dispose();
      }

      return compatibleImg;
    } catch (final Exception e) {
      log.log(Level.SEVERE, e.getMessage(), e);
      return null;
    }
  }
