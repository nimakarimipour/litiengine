====================
Type='PASS_NULLABLE', message='passing @Nullable parameter 'sprite' where @NonNull is required'
/home/nima/Developer/nullness-benchmarks/litiengine/src/de/gurkenlabs/litiengine/graphics/animation/AnimationController.java:210
      sprite = effect.apply(sprite);
Log:
11:42:28.920 TRACE edu.ucr.cs.riple.core.checkers.nullaway.NullAway.lambda$resolveRemainingErrors$19
==============================
11:42:28.920 TRACE edu.ucr.cs.riple.core.checkers.nullaway.NullAway.lambda$resolveRemainingErrors$19
CHATGPT.COUNT = 1
11:42:28.920 TRACE edu.ucr.cs.riple.core.checkers.nullaway.NullAway.lambda$resolveRemainingErrors$19
CHATGPT.PROMPTS SIZE = 1
11:42:28.920 TRACE edu.ucr.cs.riple.core.checkers.nullaway.NullAway.lambda$resolveRemainingErrors$19
Both set to 0 and cleared 0
11:42:28.920 TRACE edu.ucr.cs.riple.core.checkers.nullaway.NullAway.lambda$resolveRemainingErrors$19
60 : TOP LEVEL CALL TO FIX ERROR: Type='PASS_NULLABLE', message='passing @Nullable parameter 'sprite' where @NonNull is required'
/home/nima/Developer/nullness-benchmarks/litiengine/src/de/gurkenlabs/litiengine/graphics/animation/AnimationController.java:210
      sprite = effect.apply(sprite);
11:42:30.418 TRACE edu.ucr.cs.riple.core.checkers.nullaway.codefix.ChatGPT.ask
Asking ChatGPT:
I want to resolve a warning reported by NullAway.
The error is of the type of "PASS_NULLABLE" and the full error message is: "passing @Nullable parameter 'sprite' where @NonNull is required".
The line with the error is: "      sprite = effect.apply(sprite);".

The error is within "the method: getCurrentImage()" and the code surrounding the error is:
```java
  @Nullable
  @Override
  public BufferedImage getCurrentImage() {
    if (!this.isEnabled()) {
      return null;
    }

    final Animation current = this.getCurrent();
    if (current == null
        || current.getSpritesheet() == null
        || current.getCurrentKeyFrame() == null) {
      return null;
    }

    final String cacheKey = this.buildCurrentCacheKey();
    final Optional<BufferedImage> opt = Resources.images().tryGet(cacheKey);
    if (opt.isPresent()) {
      return opt.get();
    }

    BufferedImage sprite =
        current.getSpritesheet().getSprite(current.getCurrentKeyFrame().getSpriteIndex());
    for (final ImageEffect effect : this.getImageEffects()) {
      sprite = effect.apply(sprite);
    }

    return sprite;
  }

  @Nullable
  @Override
  public BufferedImage getCurrentImage(final int width, final int height) {
    if (this.getCurrentImage() == null) {
      return null;
    }

    final String cacheKey = this.buildCurrentCacheKey() + "_" + width + "_" + height;
    final Optional<BufferedImage> opt = Resources.images().tryGet(cacheKey);
    if (opt.isPresent()) {
      return opt.get();
    }

    return Imaging.scale(this.getCurrentImage(), width, height);
```

Give me the fixed code snippet (ONLY THE METHOD REWRITE OF "getCurrentImage()") in XML format in <response> tag like the example below. I will apply the fix to my codebase.
Do not import any additional libraries or classes or java comments.
If you can provide the fixed code snippet, provide it in the following format and place the code snippet in the <code> tag within ```java block.
<response>
  <success>true</success>
  <code><![CDATA[
  ```java
  Your fixed code snippet here
  ```
    ]]>
  </code>
</response>

11:42:30.418 TRACE edu.ucr.cs.riple.core.checkers.nullaway.codefix.ChatGPT.ask
Retrieving response from cache
11:42:30.418 TRACE edu.ucr.cs.riple.core.checkers.nullaway.codefix.Response.tryCreate
Trying to create Response:
```xml
<response>
  <success>true</success>
  <code><![CDATA[
  ```java
  @Override
  public BufferedImage getCurrentImage() {
    if (!this.isEnabled()) {
      return null;
    }

    final Animation current = this.getCurrent();
    if (current == null
        || current.getSpritesheet() == null
        || current.getCurrentKeyFrame() == null) {
      return null;
    }

    final String cacheKey = this.buildCurrentCacheKey();
    final Optional<BufferedImage> opt = Resources.images().tryGet(cacheKey);
    if (opt.isPresent()) {
      return opt.get();
    }

    BufferedImage sprite =
        current.getSpritesheet().getSprite(current.getCurrentKeyFrame().getSpriteIndex());

    if (sprite == null) {
        return null;
    }

    for (final ImageEffect effect : this.getImageEffects()) {
      sprite = effect.apply(sprite);
    }

    return sprite;
  }
  ```
  ]]>
  </code>
</response>
```
11:42:30.419 TRACE edu.ucr.cs.riple.core.checkers.nullaway.codefix.Response.<init>
Creating Response:
```xml
<response>
  <success>true</success>
  <code><![CDATA[
  ```java
  @Override
  public BufferedImage getCurrentImage() {
    if (!this.isEnabled()) {
      return null;
    }

    final Animation current = this.getCurrent();
    if (current == null
        || current.getSpritesheet() == null
        || current.getCurrentKeyFrame() == null) {
      return null;
    }

    final String cacheKey = this.buildCurrentCacheKey();
    final Optional<BufferedImage> opt = Resources.images().tryGet(cacheKey);
    if (opt.isPresent()) {
      return opt.get();
    }

    BufferedImage sprite =
        current.getSpritesheet().getSprite(current.getCurrentKeyFrame().getSpriteIndex());

    if (sprite == null) {
        return null;
    }

    for (final ImageEffect effect : this.getImageEffects()) {
      sprite = effect.apply(sprite);
    }

    return sprite;
  }
  ```
  ]]>
  </code>
</response>
```
11:42:30.420 TRACE edu.ucr.cs.riple.core.checkers.nullaway.codefix.Response.<init>
Response created:
@Override
  public BufferedImage getCurrentImage() {
    if (!this.isEnabled()) {
      return null;
    }

    final Animation current = this.getCurrent();
    if (current == null
        || current.getSpritesheet() == null
        || current.getCurrentKeyFrame() == null) {
      return null;
    }

    final String cacheKey = this.buildCurrentCacheKey();
    final Optional<BufferedImage> opt = Resources.images().tryGet(cacheKey);
    if (opt.isPresent()) {
      return opt.get();
    }

    BufferedImage sprite =
        current.getSpritesheet().getSprite(current.getCurrentKeyFrame().getSpriteIndex());

    if (sprite == null) {
        return null;
    }

    for (final ImageEffect effect : this.getImageEffects()) {
      sprite = effect.apply(sprite);
    }

    return sprite;
  }
