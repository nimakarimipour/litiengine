====================
Type='DEREFERENCE_NULLABLE', message='dereferenced expression value is @Nullable'
/home/nima/Developer/nullness-benchmarks/litiengine/src/de/gurkenlabs/litiengine/environment/tilemap/xml/TileData.java:290
    String enc = value.trim();
Log:
11:46:59.875 TRACE edu.ucr.cs.riple.core.checkers.nullaway.NullAway.lambda$resolveRemainingErrors$19
==============================
11:46:59.875 TRACE edu.ucr.cs.riple.core.checkers.nullaway.NullAway.lambda$resolveRemainingErrors$19
CHATGPT.COUNT = 1
11:46:59.875 TRACE edu.ucr.cs.riple.core.checkers.nullaway.NullAway.lambda$resolveRemainingErrors$19
CHATGPT.PROMPTS SIZE = 1
11:46:59.875 TRACE edu.ucr.cs.riple.core.checkers.nullaway.NullAway.lambda$resolveRemainingErrors$19
Both set to 0 and cleared 0
11:46:59.875 TRACE edu.ucr.cs.riple.core.checkers.nullaway.NullAway.lambda$resolveRemainingErrors$19
118 : TOP LEVEL CALL TO FIX ERROR: Type='DEREFERENCE_NULLABLE', message='dereferenced expression value is @Nullable'
/home/nima/Developer/nullness-benchmarks/litiengine/src/de/gurkenlabs/litiengine/environment/tilemap/xml/TileData.java:290
    String enc = value.trim();
11:47:01.410 TRACE edu.ucr.cs.riple.core.checkers.nullaway.codefix.ChatGPT.ask
Asking ChatGPT:
I want to resolve a warning reported by NullAway.
The error is of the type of "DEREFERENCE_NULLABLE" and the full error message is: "dereferenced expression value is @Nullable".
The line with the error is: "    String enc = value.trim();".

The error is within "the method: parseBase64Data(java.lang.String,java.lang.String)" and the code surrounding the error is:
```java
  protected int getHeight() {
    if (this.isInfinite() && this.minChunkOffsetYMap != 0) {
      return this.height + (this.offsetY - this.minChunkOffsetYMap);
    }

    return this.height;
  }

  protected int getOffsetX() {
    return this.offsetX;
  }

  protected int getOffsetY() {
    return this.offsetY;
  }

  protected static List<Tile> parseBase64Data(@Nullable String value, @Nullable String compression)
      throws InvalidTileLayerException {
    List<Tile> parsed = new ArrayList<>();

    String enc = value.trim();
    byte[] dec;
    try {
      dec = DatatypeConverter.parseBase64Binary(enc);
    } catch (IllegalArgumentException e) {
      throw new InvalidTileLayerException("invalid base64 string", e);
    }
    try (ByteArrayInputStream bais = new ByteArrayInputStream(dec)) {
      InputStream is;

      if (compression == null || compression.isEmpty()) {
        is = bais;
      } else if (compression.equals(Compression.GZIP)) {
        is = new GZIPInputStream(bais, dec.length);
      } else if (compression.equals(Compression.ZLIB)) {
        is = new InflaterInputStream(bais);
      } else {
        throw new IllegalArgumentException(
            "Unsupported tile layer compression method " + compression);
      }

      int read;

      while ((read = is.read()) != -1) {
        int tileId = 0;
        tileId |= read;

        read = is.read();
        int flags = read << Byte.SIZE;

        read = is.read();
        flags |= read << Byte.SIZE * 2;

        read = is.read();
        flags |= read << Byte.SIZE * 3;
        tileId |= flags;

        if (tileId == Tile.NONE) {
          parsed.add(Tile.EMPTY);
        } else {
          parsed.add(new Tile(tileId));
        }
      }

    } catch (IOException e) {
      throw new InvalidTileLayerException(e);
    }

    return parsed;
```

Give me the fixed code snippet (ONLY THE METHOD REWRITE OF "parseBase64Data(java.lang.String,java.lang.String)") in XML format in <response> tag like the example below. I will apply the fix to my codebase.
Do not import any additional libraries or classes or java comments.
If you can provide the fixed code snippet, provide it in the following format and place the code snippet in the <code> tag within ```java block.
<response>
  <success>true</success>
  <code><![CDATA[
  ```java
  Your fixed code snippet here
  ```
    ]]>
  </code>
</response>

11:47:01.410 TRACE edu.ucr.cs.riple.core.checkers.nullaway.codefix.ChatGPT.ask
Retrieving response from cache
11:47:01.410 TRACE edu.ucr.cs.riple.core.checkers.nullaway.codefix.Response.tryCreate
Trying to create Response:
```xml
<response>
  <success>true</success>
  <code><![CDATA[
  ```java
  protected static List<Tile> parseBase64Data(String value, String compression)
      throws InvalidTileLayerException {
    if (value == null) {
      throw new InvalidTileLayerException("Input value is null");
    }
  
    List<Tile> parsed = new ArrayList<>();
  
    String enc = value.trim();
    byte[] dec;
    try {
      dec = DatatypeConverter.parseBase64Binary(enc);
    } catch (IllegalArgumentException e) {
      throw new InvalidTileLayerException("invalid base64 string", e);
    }
    try (ByteArrayInputStream bais = new ByteArrayInputStream(dec)) {
      InputStream is;
  
      if (compression == null || compression.isEmpty()) {
        is = bais;
      } else if (compression.equals(Compression.GZIP)) {
        is = new GZIPInputStream(bais, dec.length);
      } else if (compression.equals(Compression.ZLIB)) {
        is = new InflaterInputStream(bais);
      } else {
        throw new IllegalArgumentException(
            "Unsupported tile layer compression method " + compression);
      }
  
      int read;
  
      while ((read = is.read()) != -1) {
        int tileId = 0;
        tileId |= read;
  
        read = is.read();
        int flags = read << Byte.SIZE;
  
        read = is.read();
        flags |= read << Byte.SIZE * 2;
  
        read = is.read();
        flags |= read << Byte.SIZE * 3;
        tileId |= flags;
  
        if (tileId == Tile.NONE) {
          parsed.add(Tile.EMPTY);
        } else {
          parsed.add(new Tile(tileId));
        }
      }
  
    } catch (IOException e) {
      throw new InvalidTileLayerException(e);
    }
  
    return parsed;
  }
  ```
    ]]>
  </code>
</response>
```
11:47:01.411 TRACE edu.ucr.cs.riple.core.checkers.nullaway.codefix.Response.<init>
Creating Response:
```xml
<response>
  <success>true</success>
  <code><![CDATA[
  ```java
  protected static List<Tile> parseBase64Data(String value, String compression)
      throws InvalidTileLayerException {
    if (value == null) {
      throw new InvalidTileLayerException("Input value is null");
    }
  
    List<Tile> parsed = new ArrayList<>();
  
    String enc = value.trim();
    byte[] dec;
    try {
      dec = DatatypeConverter.parseBase64Binary(enc);
    } catch (IllegalArgumentException e) {
      throw new InvalidTileLayerException("invalid base64 string", e);
    }
    try (ByteArrayInputStream bais = new ByteArrayInputStream(dec)) {
      InputStream is;
  
      if (compression == null || compression.isEmpty()) {
        is = bais;
      } else if (compression.equals(Compression.GZIP)) {
        is = new GZIPInputStream(bais, dec.length);
      } else if (compression.equals(Compression.ZLIB)) {
        is = new InflaterInputStream(bais);
      } else {
        throw new IllegalArgumentException(
            "Unsupported tile layer compression method " + compression);
      }
  
      int read;
  
      while ((read = is.read()) != -1) {
        int tileId = 0;
        tileId |= read;
  
        read = is.read();
        int flags = read << Byte.SIZE;
  
        read = is.read();
        flags |= read << Byte.SIZE * 2;
  
        read = is.read();
        flags |= read << Byte.SIZE * 3;
        tileId |= flags;
  
        if (tileId == Tile.NONE) {
          parsed.add(Tile.EMPTY);
        } else {
          parsed.add(new Tile(tileId));
        }
      }
  
    } catch (IOException e) {
      throw new InvalidTileLayerException(e);
    }
  
    return parsed;
  }
  ```
    ]]>
  </code>
</response>
```
11:47:01.411 TRACE edu.ucr.cs.riple.core.checkers.nullaway.codefix.Response.<init>
Response created:
protected static List<Tile> parseBase64Data(String value, String compression)
      throws InvalidTileLayerException {
    if (value == null) {
      throw new InvalidTileLayerException("Input value is null");
    }
  
    List<Tile> parsed = new ArrayList<>();
  
    String enc = value.trim();
    byte[] dec;
    try {
      dec = DatatypeConverter.parseBase64Binary(enc);
    } catch (IllegalArgumentException e) {
      throw new InvalidTileLayerException("invalid base64 string", e);
    }
    try (ByteArrayInputStream bais = new ByteArrayInputStream(dec)) {
      InputStream is;
  
      if (compression == null || compression.isEmpty()) {
        is = bais;
      } else if (compression.equals(Compression.GZIP)) {
        is = new GZIPInputStream(bais, dec.length);
      } else if (compression.equals(Compression.ZLIB)) {
        is = new InflaterInputStream(bais);
      } else {
        throw new IllegalArgumentException(
            "Unsupported tile layer compression method " + compression);
      }
  
      int read;
  
      while ((read = is.read()) != -1) {
        int tileId = 0;
        tileId |= read;
  
        read = is.read();
        int flags = read << Byte.SIZE;
  
        read = is.read();
        flags |= read << Byte.SIZE * 2;
  
        read = is.read();
        flags |= read << Byte.SIZE * 3;
        tileId |= flags;
  
        if (tileId == Tile.NONE) {
          parsed.add(Tile.EMPTY);
        } else {
          parsed.add(new Tile(tileId));
        }
      }
  
    } catch (IOException e) {
      throw new InvalidTileLayerException(e);
    }
  
    return parsed;
  }
