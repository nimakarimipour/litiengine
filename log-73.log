====================
Type='RETURN_NULLABLE', message='returning @Nullable expression from method with @NonNull return type'
/home/nima/Developer/nullness-benchmarks/litiengine/src/de/gurkenlabs/litiengine/input/GamepadManager.java:164
      return null;
Log:
---NullAway.lambda$resolveRemainingErrors$17---
==============================
---NullAway.lambda$resolveRemainingErrors$17---
TOP LEVEL CALL TO FIX ERROR: Type='RETURN_NULLABLE', message='returning @Nullable expression from method with @NonNull return type'
/home/nima/Developer/nullness-benchmarks/litiengine/src/de/gurkenlabs/litiengine/input/GamepadManager.java:164
      return null;
---ChatGPT.ask---
Asking ChatGPT:
I want to resolve a warning reported by NullAway.
The error is of the type of "RETURN_NULLABLE" and the full error message is: "returning @Nullable expression from method with @NonNull return type".
The line with the error is: "      return null;".

The error is within "the method: get(int)" and the code surrounding the error is:
```java
package de.gurkenlabs.litiengine.input;

import de.gurkenlabs.litiengine.Game;
import de.gurkenlabs.litiengine.GameListener;
import de.gurkenlabs.litiengine.ILaunchable;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.util.Collection;
import java.util.EventListener;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.annotation.Nullable;
import net.java.games.input.Controller;
import net.java.games.input.Controller.Type;
import net.java.games.input.ControllerEnvironment;

/**
 * The {@code GamepadManager} provides access to all gamepad input devices.
 *
 * <p>Gamepads don't need to be added explicitly, the manager supports hot-plugging at runtime and
 * will auto-detect any added/removed gamepads.
 *
 * @see #current()
 * @see #get(int)
 */
public final class GamepadManager extends GamepadEvents implements ILaunchable {
  private static final Logger log = Logger.getLogger(GamepadManager.class.getName());

  private final Collection<GamepadAddedListener> gamepadAddedConsumer;
  private final Collection<GamepadRemovedListener> gamepadRemovedConsumer;

  private final List<Gamepad> gamePads;

  private final Thread hotPlugThread;

  private int defaultgamepadId = -1;
  private boolean handleHotPluggedControllers;

  GamepadManager() {
    this.gamepadRemovedConsumer = ConcurrentHashMap.newKeySet();
    this.gamepadAddedConsumer = ConcurrentHashMap.newKeySet();

    this.gamePads = new CopyOnWriteArrayList<>();

    this.hotPlugThread =
        new Thread(
            () -> {
              while (!Thread.interrupted()) {
                this.updateGamepads();

                try {
                  Thread.sleep(1000);
                } catch (InterruptedException e) {
                  Thread.currentThread().interrupt();
                  break;
                }
              }
            });

    Game.addGameListener(
        new GameListener() {
          @Override
          public void terminated() {
            hotPlugThread.interrupt();
          }
        });

    this.onAdded(
        pad -> {
          if (this.defaultgamepadId == -1) {
            this.defaultgamepadId = pad.getId();
            this.hookupToGamepad(pad);
          }
        });

    this.onRemoved(
        pad -> {
          if (this.defaultgamepadId == pad.getId()) {
            this.defaultgamepadId = -1;
            final Gamepad newGamePad = current();
            if (newGamePad != null) {
              this.defaultgamepadId = newGamePad.getId();
              this.hookupToGamepad(newGamePad);
            }
          }
        });

    updateGamepads();
  }

  /**
   * Adds the specified gamepad added listener to receive events when gamepads are added.
   *
   * @param listener The listener to add.
   */
  public void onAdded(final GamepadAddedListener listener) {
    this.gamepadAddedConsumer.add(listener);
  }

  /**
   * Unregister the specified added listener from this instance.
   *
   * @param listener The listener to remove.
   */
  public void removeAddedListener(GamepadAddedListener listener) {
    this.gamepadAddedConsumer.remove(listener);
  }

  /**
   * Adds the specified gamepad removed listener to receive events when gamepads are removed.
   *
   * @param listener The listener to add.
   */
  public void onRemoved(final GamepadRemovedListener listener) {
    this.gamepadRemovedConsumer.add(listener);
  }

  /**
   * Unregister the specified removed listener from this instance.
   *
   * @param listener The listener to remove.
   */
  public void removeRemovedListener(GamepadRemovedListener listener) {
    this.gamepadRemovedConsumer.remove(listener);
  }

  /**
   * Gets all gamepads that are currently available.
   *
   * @return All available gamepads.
   * @see #get(int)
   * @see #current()
   */
  public List<Gamepad> getAll() {
    return this.gamePads;
  }

  /**
   * Gets the first gamepad that is currently available.
   *
   * @return The first available {@link Gamepad} instance
   * @see #get(int)
   * @see #getAll()
   */
  public Gamepad current() {
    return get(0);
  }

  /**
   * Gets the gamepad by the index within the gamepad list.
   *
   * @param index The index of the {@link Gamepad}.
   * @return The {@link Gamepad} with the specified index.
   * @see #getAll()
   * @see #current()
   */
  public Gamepad get(final int index) {
    if (this.gamePads.isEmpty()) {
      return null;
    }

    return this.gamePads.get(index);
```

Give me the fixed code snippet (ONLY THE METHOD REWRITE OF "get(int)") in XML format in <response> tag like the example below. I will apply the fix to my codebase.
Do not import any additional libraries or classes or java comments.
If you can provide the fixed code snippet, provide it in the following format and place the code snippet in the <code> tag within ```java block.
<response>
  <success>true</success>
  <code><![CDATA[
  ```java
  Your fixed code snippet here
  ```
    ]]>
  </code>
</response>

---ChatGPT.sendRequestToOpenAI---
Sending request to OpenAI...
---ChatGPT.sendRequestToOpenAI---
Response received from OpenAI.
---Response.<init>---
Creating Response:
```xml
<response>
  <success>true</success>
  <code><![CDATA[
  ```java
  public Gamepad get(final int index) {
    if (this.gamePads.isEmpty()) {
      throw new IllegalStateException("No gamepads are currently available.");
    }

    return this.gamePads.get(index);
  }
  ```
    ]]>
  </code>
</response>
```
---Response.<init>---
Response created:
public Gamepad get(final int index) {
    if (this.gamePads.isEmpty()) {
      throw new IllegalStateException("No gamepads are currently available.");
    }

    return this.gamePads.get(index);
  }
