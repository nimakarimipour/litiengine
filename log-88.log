====================
Type='PASS_NULLABLE', message='passing @Nullable parameter 'focus' where @NonNull is required'
/home/nima/Developer/nullness-benchmarks/litiengine/src/de/gurkenlabs/litiengine/graphics/Camera.java:139
    this.focus = this.clampToMap(focus);
Log:
---NullAway.lambda$resolveRemainingErrors$17---
==============================
---NullAway.lambda$resolveRemainingErrors$17---
TOP LEVEL CALL TO FIX ERROR: Type='PASS_NULLABLE', message='passing @Nullable parameter 'focus' where @NonNull is required'
/home/nima/Developer/nullness-benchmarks/litiengine/src/de/gurkenlabs/litiengine/graphics/Camera.java:139
    this.focus = this.clampToMap(focus);
---ChatGPT.ask---
Asking ChatGPT:
I want to resolve a warning reported by NullAway.
The error is of the type of "PASS_NULLABLE" and the full error message is: "passing @Nullable parameter 'focus' where @NonNull is required".
The line with the error is: "    this.focus = this.clampToMap(focus);".

The error is within "the method: setFocus(java.awt.geom.Point2D)" and the code surrounding the error is:
```java
import de.gurkenlabs.litiengine.Game;
import de.gurkenlabs.litiengine.Valign;
import de.gurkenlabs.litiengine.entities.IEntity;
import de.gurkenlabs.litiengine.graphics.animation.IAnimationController;
import de.gurkenlabs.litiengine.util.MathUtilities;
import java.awt.Dimension;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.util.Collection;
import java.util.Objects;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ThreadLocalRandom;
import javax.annotation.Nullable;

public class Camera implements ICamera {
  private final Collection<ZoomChangedListener> zoomListeners = ConcurrentHashMap.newKeySet();
  private final Collection<FocusChangedListener> focusChangedListeners =
      ConcurrentHashMap.newKeySet();

  private Point2D focus;
  private long lastShake;

  private int shakeDelay;

  private int shakeDuration = 2;
  private double shakeIntensity = 1;

  private double shakeOffsetX;
  private double shakeOffsetY;

  private long shakeTick;
  private Rectangle2D viewport;

  private float zoom;
  private float targetZoom;

  private int zoomDelay;
  private float zoomStep;

  private long zoomTick;

  @Nullable private Point2D targetFocus;
  private int panTime = 0;

  private boolean clampToMap;
  private Align align = Align.LEFT;
  private Valign valign = Valign.TOP;

  /** Instantiates a new {@code Camera} instance. */
  public Camera() {
    this.focus = new Point2D.Double();
    this.viewport = new Rectangle2D.Double();
    this.zoom = 1;
  }

  @Override
  public Point2D getFocus() {
    return this.focus;
  }

  @Override
  public Point2D getMapLocation(final Point2D viewPortLocation) {
    final double x = viewPortLocation.getX() - this.getPixelOffsetX();
    final double y = viewPortLocation.getY() - this.getPixelOffsetY();
    return new Point2D.Double(x, y);
  }

  @Override
  public double getPixelOffsetX() {
    return -this.viewport.getX();
  }

  @Override
  public double getPixelOffsetY() {
    return -this.viewport.getY();
  }

  @Override
  public Rectangle2D getViewport() {
    return (Rectangle2D) this.viewport.clone();
  }

  @Override
  public Point2D getViewportDimensionCenter(final IEntity entity) {
    final Point2D viewPortLocation = this.getViewportLocation(entity);

    final IAnimationController animationController = entity.animations();
    if (animationController == null || animationController.getCurrent() == null) {
      return new Point2D.Double(
          viewPortLocation.getX() + entity.getWidth() * 0.5,
          viewPortLocation.getY() + entity.getHeight() * 0.5);
    }

    final Spritesheet spriteSheet = animationController.getCurrent().getSpritesheet();
    if (spriteSheet == null) {
      return viewPortLocation;
    }

    return new Point2D.Double(
        viewPortLocation.getX() + spriteSheet.getSpriteWidth() * 0.5,
        viewPortLocation.getY() + spriteSheet.getSpriteHeight() * 0.5);
  }

  @Override
  public Point2D getViewportLocation(final double x, final double y) {
    return new Point2D.Double(x + this.getPixelOffsetX(), y + this.getPixelOffsetY());
  }

  @Override
  public float getZoom() {
    return this.zoom;
  }

  @Override
  public void onZoom(final ZoomChangedListener listener) {
    this.zoomListeners.add(listener);
  }

  @Override
  public void removeZoomListener(ZoomChangedListener listener) {
    this.zoomListeners.remove(listener);
  }

  @Override
  public void onFocus(final FocusChangedListener listener) {
    this.focusChangedListeners.add(listener);
  }

  @Override
  public void removeFocusListener(FocusChangedListener listener) {
    this.focusChangedListeners.remove(listener);
  }

  @Override
  public void setFocus(@Nullable final Point2D focus) {
    this.focus = this.clampToMap(focus);

    // dunno why but without the factor of 0.01 sometimes everything starts to
    // get wavy while rendering ...
    // it seems to be an issue with the focus location being exactly dividable
    // by up to 4?? (maybe even more for higher renderscales)
    // this is somehow related to the rendering scale: if the rendering scale is
    // lower this will only be affected by lower dividable numbers (e.g.
    // renderscale of 6 only has an issue with 1 and 0.5)
    // seems like java cannot place certain images onto their exact pixel
    // location with an AffineTransform...
    final double fraction = this.focus.getY() - Math.floor(this.focus.getY());
    if (MathUtilities.isInt(fraction * 4)) {
      this.focus.setLocation(this.focus.getX(), this.focus.getY() + 0.01);
    }

    final FocusChangedEvent event = new FocusChangedEvent(this, this.focus);
    for (FocusChangedListener listener : this.focusChangedListeners) {
      listener.focusChanged(event);
    }
```

Give me the fixed code snippet (ONLY THE METHOD REWRITE OF "setFocus(java.awt.geom.Point2D)") in XML format in <response> tag like the example below. I will apply the fix to my codebase.
Do not import any additional libraries or classes or java comments.
If you can provide the fixed code snippet, provide it in the following format and place the code snippet in the <code> tag within ```java block.
<response>
  <success>true</success>
  <code><![CDATA[
  ```java
  Your fixed code snippet here
  ```
    ]]>
  </code>
</response>

---ChatGPT.sendRequestToOpenAI---
Sending request to OpenAI...
---ChatGPT.sendRequestToOpenAI---
Response received from OpenAI.
---Response.<init>---
Creating Response:
```xml
<response>
  <success>true</success>
  <code><![CDATA[
  ```java
  @Override
  public void setFocus(final Point2D focus) {
    if (focus == null) {
      throw new IllegalArgumentException("Focus cannot be null");
    }
    this.focus = this.clampToMap(focus);

    final double fraction = this.focus.getY() - Math.floor(this.focus.getY());
    if (MathUtilities.isInt(fraction * 4)) {
      this.focus.setLocation(this.focus.getX(), this.focus.getY() + 0.01);
    }

    final FocusChangedEvent event = new FocusChangedEvent(this, this.focus);
    for (FocusChangedListener listener : this.focusChangedListeners) {
      listener.focusChanged(event);
    }
  }
  ```
    ]]>
  </code>
</response>
```
---Response.<init>---
Response created:
@Override
  public void setFocus(final Point2D focus) {
    if (focus == null) {
      throw new IllegalArgumentException("Focus cannot be null");
    }
    this.focus = this.clampToMap(focus);

    final double fraction = this.focus.getY() - Math.floor(this.focus.getY());
    if (MathUtilities.isInt(fraction * 4)) {
      this.focus.setLocation(this.focus.getX(), this.focus.getY() + 0.01);
    }

    final FocusChangedEvent event = new FocusChangedEvent(this, this.focus);
    for (FocusChangedListener listener : this.focusChangedListeners) {
      listener.focusChanged(event);
    }
  }
