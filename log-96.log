====================
Type='DEREFERENCE_NULLABLE', message='dereferenced expression spriteSheet is @Nullable'
/home/nima/Developer/nullness-benchmarks/litiengine/src/de/gurkenlabs/litiengine/environment/CreatureMapObjectLoader.java:86
        if (prefix != null && spriteSheet.equalsIgnoreCase(prefix)) {
Log:
---NullAway.lambda$resolveRemainingErrors$17---
==============================
---NullAway.lambda$resolveRemainingErrors$17---
TOP LEVEL CALL TO FIX ERROR: Type='DEREFERENCE_NULLABLE', message='dereferenced expression spriteSheet is @Nullable'
/home/nima/Developer/nullness-benchmarks/litiengine/src/de/gurkenlabs/litiengine/environment/CreatureMapObjectLoader.java:86
        if (prefix != null && spriteSheet.equalsIgnoreCase(prefix)) {
---ChatGPT.ask---
Asking ChatGPT:
I want to resolve a warning reported by NullAway.
The error is of the type of "DEREFERENCE_NULLABLE" and the full error message is: "dereferenced expression spriteSheet is @Nullable".
The line with the error is: "        if (prefix != null && spriteSheet.equalsIgnoreCase(prefix)) {".

The error is within "the method: createNewCreature(de.gurkenlabs.litiengine.environment.tilemap.IMapObject,java.lang.String)" and the code surrounding the error is:
```java
package de.gurkenlabs.litiengine.environment;

import de.gurkenlabs.litiengine.Direction;
import de.gurkenlabs.litiengine.entities.AnimationInfo;
import de.gurkenlabs.litiengine.entities.Creature;
import de.gurkenlabs.litiengine.entities.IEntity;
import de.gurkenlabs.litiengine.environment.tilemap.IMapObject;
import de.gurkenlabs.litiengine.environment.tilemap.MapObjectProperty;
import de.gurkenlabs.litiengine.environment.tilemap.MapObjectType;
import de.gurkenlabs.litiengine.graphics.animation.EntityAnimationController;
import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.annotation.Nullable;

public class CreatureMapObjectLoader extends MapObjectLoader {
  private static final Logger log = Logger.getLogger(CreatureMapObjectLoader.class.getName());
  private static final List<Class<? extends Creature>> customCreatureType;

  static {
    customCreatureType = new CopyOnWriteArrayList<>();
  }

  protected CreatureMapObjectLoader() {
    super(MapObjectType.CREATURE);
  }

  /**
   * Registers a custom {@link Creature} implementation that can be automatically provided by this
   * {@link MapObjectLoader}.
   *
   * <p><b>This should only be used if the particular implementation doesn't require any additional
   * map object properties to be initialized.</b> Make sure that the implementation has the
   * following present:
   *
   * <ol>
   *   <li>An {@link AnimationInfo} annotation with one or more sprite prefixes defined
   *   <li>Either an empty constructor or a constructor that takes in the sprite prefix from the
   *       loader.
   * </ol>
   *
   * <p>The latter is particularly useful for classes that can have different sprite sheets, i.e.
   * share the same logic but might have a different appearance.
   *
   * @param <T> The type of the custom creature implementation.
   * @param creatureType The class of the custom {@link Creature} implementation.
   */
  public static <T extends Creature> void registerCustomCreatureType(Class<T> creatureType) {
    customCreatureType.add(creatureType);
  }

  @Override
  public Collection<IEntity> load(Environment environment, IMapObject mapObject) {
    Collection<IEntity> entities = new ArrayList<>();
    if (!this.isMatchingType(mapObject)) {
      return entities;
    }

    final String spriteSheet = mapObject.getStringValue(MapObjectProperty.SPRITESHEETNAME);

    Creature creature = this.createNewCreature(mapObject, spriteSheet);
    loadDefaultProperties(creature, mapObject);

    if (mapObject.hasCustomProperty(MapObjectProperty.MOVEMENT_VELOCITY)) {
      creature.setVelocity(mapObject.getFloatValue(MapObjectProperty.MOVEMENT_VELOCITY));
    }

    creature.setFacingDirection(
        mapObject.getEnumValue(
            MapObjectProperty.SPAWN_DIRECTION, Direction.class, Direction.RIGHT));

    entities.add(creature);
    return entities;
  }

  protected Creature createNewCreature(IMapObject mapObject, @Nullable String spriteSheet) {
    // for each known custom creature type, check if it was registered for the specified
    // spriteSheetName
    // if so: create an instance of the custom class instead of the default Creature class
    for (Class<? extends Creature> customCreature : customCreatureType) {
      for (String prefix : EntityAnimationController.getDefaultSpritePrefixes(customCreature)) {
        if (prefix != null && spriteSheet.equalsIgnoreCase(prefix)) {
          Creature created = createCustomCreature(customCreature, spriteSheet);
          if (created != null) {
            return created;
          }
        }
      }
    }

    // if no custom creature type war registered for the spriteSheet, we just create a new Creature
    // instance
    return new Creature(spriteSheet);
```

Give me the fixed code snippet (ONLY THE METHOD REWRITE OF "createNewCreature(de.gurkenlabs.litiengine.environment.tilemap.IMapObject,java.lang.String)") in XML format in <response> tag like the example below. I will apply the fix to my codebase.
Do not import any additional libraries or classes or java comments.
If you can provide the fixed code snippet, provide it in the following format and place the code snippet in the <code> tag within ```java block.
<response>
  <success>true</success>
  <code><![CDATA[
  ```java
  Your fixed code snippet here
  ```
    ]]>
  </code>
</response>

---ChatGPT.sendRequestToOpenAI---
Sending request to OpenAI...
---ChatGPT.sendRequestToOpenAI---
Response received from OpenAI.
---Response.<init>---
Creating Response:
```xml
<response>
  <success>true</success>
  <code><![CDATA[
  ```java
  protected Creature createNewCreature(IMapObject mapObject, String spriteSheet) {
    if (spriteSheet == null) {
      throw new IllegalArgumentException("spriteSheet cannot be null");
    }
    
    for (Class<? extends Creature> customCreature : customCreatureType) {
      for (String prefix : EntityAnimationController.getDefaultSpritePrefixes(customCreature)) {
        if (prefix != null && spriteSheet.equalsIgnoreCase(prefix)) {
          Creature created = createCustomCreature(customCreature, spriteSheet);
          if (created != null) {
            return created;
          }
        }
      }
    }

    return new Creature(spriteSheet);
  }
  ```
  ]]>
  </code>
</response>
```
---Response.<init>---
Response created:
protected Creature createNewCreature(IMapObject mapObject, String spriteSheet) {
    if (spriteSheet == null) {
      throw new IllegalArgumentException("spriteSheet cannot be null");
    }
    
    for (Class<? extends Creature> customCreature : customCreatureType) {
      for (String prefix : EntityAnimationController.getDefaultSpritePrefixes(customCreature)) {
        if (prefix != null && spriteSheet.equalsIgnoreCase(prefix)) {
          Creature created = createCustomCreature(customCreature, spriteSheet);
          if (created != null) {
            return created;
          }
        }
      }
    }

    return new Creature(spriteSheet);
  }
