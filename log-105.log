====================
Type='RETURN_NULLABLE', message='returning @Nullable expression from method with @NonNull return type'
/home/nima/Developer/nullness-benchmarks/litiengine/src/de/gurkenlabs/litiengine/environment/GameWorld.java:241
    return this.environment;
Log:
---NullAway.lambda$resolveRemainingErrors$17---
==============================
---NullAway.lambda$resolveRemainingErrors$17---
TOP LEVEL CALL TO FIX ERROR: Type='RETURN_NULLABLE', message='returning @Nullable expression from method with @NonNull return type'
/home/nima/Developer/nullness-benchmarks/litiengine/src/de/gurkenlabs/litiengine/environment/GameWorld.java:241
    return this.environment;
---ChatGPT.ask---
Asking ChatGPT:
I want to resolve a warning reported by NullAway.
The error is of the type of "RETURN_NULLABLE" and the full error message is: "returning @Nullable expression from method with @NonNull return type".
The line with the error is: "    return this.environment;".

The error is within "the method: environment()" and the code surrounding the error is:
```java
package de.gurkenlabs.litiengine.environment;

import de.gurkenlabs.litiengine.Game;
import de.gurkenlabs.litiengine.IUpdateable;
import de.gurkenlabs.litiengine.entities.IMobileEntity;
import de.gurkenlabs.litiengine.environment.tilemap.IMap;
import de.gurkenlabs.litiengine.graphics.Camera;
import de.gurkenlabs.litiengine.graphics.ICamera;
import de.gurkenlabs.litiengine.resources.Resources;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.locks.Lock;
import javax.annotation.Nullable;

/**
 * The {@code GameWorld} class is a global environment manager that contains all {@code
 * Environments} and provides the currently active {@code Environment} and {@code Camera}.<br>
 *
 * <p>The {@code GameWorld} returns the same instance for a particular map/mapName until the {@code
 * GameWorld.reset(String)} method is called. Moreover, it provides the possibility to attach game
 * logic via {@code EnvironmentListeners} to different events of the {@code Envrionment's} life
 * cycle (e.g. loaded, initialized, ...).<br>
 * <i>This is typically used to provide some per-level logic or to trigger general loading
 * behavior.</i>
 *
 * @see Environment
 * @see Camera
 * @see GameWorld#environment()
 * @see GameWorld#camera()
 * @see GameWorld#reset(String)
 */
public final class GameWorld implements IUpdateable {
  private final List<EnvironmentListener> listeners = new CopyOnWriteArrayList<>();
  private final List<EnvironmentLoadedListener> loadedListeners = new CopyOnWriteArrayList<>();
  private final List<EnvironmentUnloadedListener> unloadedListeners = new CopyOnWriteArrayList<>();

  private final Map<String, Collection<EnvironmentListener>> environmentListeners =
      new ConcurrentHashMap<>();
  private final Map<String, Collection<EnvironmentLoadedListener>> environmentLoadedListeners =
      new ConcurrentHashMap<>();
  private final Map<String, Collection<EnvironmentUnloadedListener>> environmentUnloadedListeners =
      new ConcurrentHashMap<>();
  private final Map<String, Collection<IUpdateable>> updatables = new ConcurrentHashMap<>();

  private final Map<String, Environment> environments = new ConcurrentHashMap<>();

  @Nullable private Environment environment;
  @Nullable private ICamera camera;
  private int gravity;

  /**
   * <b>You should never call this manually! Instead use the {@code Game.world()} instance.</b>
   *
   * @see Game#world()
   */
  public GameWorld() {
    if (Game.world() != null) {
      throw new UnsupportedOperationException(
          "Never initialize a GameWorld manually. Use Game.world() instead.");
    }
  }

  /** Don't call this manually! */
  @Override
  public void update() {
    if (this.environment() == null) {
      return;
    }

    String mapName = getMapName(this.environment());
    if (mapName != null && this.updatables.containsKey(mapName)) {
      for (IUpdateable updatable : this.updatables.get(mapName)) {
        updatable.update();
      }
    }
  }

  /**
   * Adds the specified environment listener to receive events about the basic life-cycle of
   * environments. This is a global event that gets called for any map.
   *
   * @param listener The listener to add.
   */
  public void addListener(EnvironmentListener listener) {
    this.listeners.add(listener);
  }

  /**
   * Removes the specified environment listener.
   *
   * @param listener The listener to remove.
   */
  public void removeListener(EnvironmentListener listener) {
    this.listeners.remove(listener);
  }

  /**
   * Adds the specified environment loaded listener to receive events for when an environment gets
   * loaded. This is a global event that gets called for any map.
   *
   * @param listener The listener to add.
   */
  public void onLoaded(EnvironmentLoadedListener listener) {
    this.loadedListeners.add(listener);
  }

  /**
   * Removes the specified environment loaded listener.
   *
   * @param listener The listener to remove.
   */
  public void removeLoadedListener(EnvironmentLoadedListener listener) {
    this.loadedListeners.remove(listener);
  }

  /**
   * Adds the specified environment unloaded listener to receive events for when an environment gets
   * unloaded. This is a global event that gets called for any map.
   *
   * @param listener The listener to add.
   */
  public void onUnloaded(EnvironmentUnloadedListener listener) {
    this.unloadedListeners.add(listener);
  }

  /**
   * Removes the specified environment unloaded listener.
   *
   * @param listener The listener to remove.
   */
  public void removeUnloadedListener(EnvironmentUnloadedListener listener) {
    this.unloadedListeners.remove(listener);
  }

  /**
   * Adds the specified environment loaded listener to receive events for when an environment with
   * the specified map name gets loaded.
   *
   * @param mapName The name of the map for which to add the listener.
   * @param listener The listener to add.
   */
  public void onLoaded(String mapName, EnvironmentLoadedListener listener) {
    add(this.environmentLoadedListeners, mapName, listener);
  }

  /**
   * Removes the specified environment loaded listener for the specified map name.
   *
   * @param mapName The name of the map for which to remove the listener.
   * @param listener The listener to remove.
   */
  public void removeLoadedListener(String mapName, EnvironmentLoadedListener listener) {
    remove(this.environmentLoadedListeners, mapName, listener);
  }

  /**
   * Adds the specified environment unloaded listener to receive events for when an environment with
   * the specified map name gets unloaded.
   *
   * @param mapName The name of the map for which to add the listener.
   * @param listener The listener to add.
   */
  public void onUnloaded(String mapName, EnvironmentUnloadedListener listener) {
    add(this.environmentUnloadedListeners, mapName, listener);
  }

  /**
   * Removes the specified environment unloaded listener for the specified map name.
   *
   * @param mapName The name of the map for which to remove the listener.
   * @param listener The listener to remove.
   */
  public void removeUnloadedListener(String mapName, EnvironmentUnloadedListener listener) {
    add(this.environmentUnloadedListeners, mapName, listener);
  }

  /**
   * Adds the specified environment listener to receive events about the basic life-cycle of
   * environments with the specified map name.
   *
   * @param mapName The name of the map for which to add the listener.
   * @param listener The listener to add.
   */
  public void addListener(String mapName, EnvironmentListener listener) {
    add(this.environmentListeners, mapName, listener);
  }

  /**
   * Removes the specified environment listener.
   *
   * @param mapName The name of the map for which to remove the listener.
   * @param listener The listener to remove.
   */
  public void removeListener(String mapName, EnvironmentListener listener) {
    remove(this.environmentListeners, mapName, listener);
  }

  /**
   * Attaches the specified updatable instance that only gets updated when an environment with the
   * specified map name is currently loaded.
   *
   * @param mapName The name of the map for which to attach the updatable instance.
   * @param updateable The updatable instance to attach.
   */
  public void attach(String mapName, IUpdateable updateable) {
    add(this.updatables, mapName, updateable);
  }

  /**
   * Detaches the specified updatable instance from the updating of environments with the specified
   * map name.
   *
   * @param mapName The name of the map for which to detach the updatable instance.
   * @param updateable The updatable instance to detach.
   */
  public void detach(String mapName, IUpdateable updateable) {
    remove(this.updatables, mapName, updateable);
  }

  /**
   * Gets the game's current {@code Camera}.
   *
   * @return The currently active camera.
   * @see ICamera
   */
  public ICamera camera() {
    return this.camera;
  }

  /**
   * Gets the game's current {@code Environment}.
   *
   * @return The currently active environment.
   * @see Environment
   */
  public Environment environment() {
    return this.environment;
```

Give me the fixed code snippet (ONLY THE METHOD REWRITE OF "environment()") in XML format in <response> tag like the example below. I will apply the fix to my codebase.
Do not import any additional libraries or classes or java comments.
If you can provide the fixed code snippet, provide it in the following format and place the code snippet in the <code> tag within ```java block.
<response>
  <success>true</success>
  <code><![CDATA[
  ```java
  Your fixed code snippet here
  ```
    ]]>
  </code>
</response>

---ChatGPT.sendRequestToOpenAI---
Sending request to OpenAI...
---ChatGPT.sendRequestToOpenAI---
Response received from OpenAI.
---Response.<init>---
Creating Response:
```xml
<response>
  <success>true</success>
  <code><![CDATA[
  ```java
  public Environment environment() {
    if (this.environment == null) {
      throw new IllegalStateException("Environment is not initialized");
    }
    return this.environment;
  }
  ```
    ]]>
  </code>
</response>
```
---Response.<init>---
Response created:
public Environment environment() {
    if (this.environment == null) {
      throw new IllegalStateException("Environment is not initialized");
    }
    return this.environment;
  }
