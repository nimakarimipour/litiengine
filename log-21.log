====================
Type='DEREFERENCE_NULLABLE', message='dereferenced expression resourceName is @Nullable'
/home/nima/Developer/nullness-benchmarks/litiengine/src/de/gurkenlabs/litiengine/resources/ResourcesContainer.java:116
    this.add(resourceName.toString(), resource);
Log:
---NullAway.lambda$resolveRemainingErrors$17---
==============================
---NullAway.lambda$resolveRemainingErrors$17---
TOP LEVEL CALL TO FIX ERROR: Type='DEREFERENCE_NULLABLE', message='dereferenced expression resourceName is @Nullable'
/home/nima/Developer/nullness-benchmarks/litiengine/src/de/gurkenlabs/litiengine/resources/ResourcesContainer.java:116
    this.add(resourceName.toString(), resource);
---ChatGPT.ask---
Asking ChatGPT:
I want to resolve a warning reported by NullAway.
The error is of the type of "DEREFERENCE_NULLABLE" and the full error message is: "dereferenced expression resourceName is @Nullable".
The line with the error is: "    this.add(resourceName.toString(), resource);".

The error is within "the method: add(java.net.URL,T)" and the code surrounding the error is:
```java
package de.gurkenlabs.litiengine.resources;

import de.gurkenlabs.litiengine.Game;
import de.gurkenlabs.litiengine.GameListener;
import java.net.URL;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.function.Predicate;
import java.util.function.Supplier;
import java.util.stream.Collectors;
import javax.annotation.Nullable;

/**
 * An abstract implementation for all classes that provide a certain type of resources. Basically,
 * it's an in-memory cache of the resources and provides access to manage the resources.
 *
 * @param <T> The type of the resource that is contained by this instance.
 * @see ResourcesContainerListener
 */
public abstract class ResourcesContainer<T> {
  // use a work-stealing pool to maximize resource load speed while minimizing the number of
  // resources in use
  private static final ExecutorService ASYNC_POOL = Executors.newWorkStealingPool();

  private final Map<String, T> resources = new ConcurrentHashMap<>();
  private final Map<String, String> aliases = new ConcurrentHashMap<>();
  private final List<ResourcesContainerListener<? super T>> listeners =
      new CopyOnWriteArrayList<>();
  private final List<ResourcesContainerClearedListener> clearedListeners =
      new CopyOnWriteArrayList<>();

  static {
    Game.addGameListener(
        new GameListener() {
          @Override
          public void terminated() {
            ASYNC_POOL.shutdownNow();
          }
        });
  }

  /**
   * Add a new container listener to this instance in order to observe resource life cycles. The
   * listener will get notified whenever a resource was added to or removed from this container.
   *
   * @param listener The container listener instance that will receive call backs from this
   *     container.
   * @see #removeContainerListener(ResourcesContainerListener)
   */
  public void addContainerListener(ResourcesContainerListener<? super T> listener) {
    this.listeners.add(listener);
  }

  /**
   * Remove the specified listener from this container.
   *
   * @param listener The listener instance that was previously added to this container.
   * @see #addContainerListener(ResourcesContainerListener)
   */
  public void removeContainerListener(ResourcesContainerListener<T> listener) {
    this.listeners.remove(listener);
  }

  /**
   * Add a new container listener to this instance that observes whenever this instance is cleared.
   *
   * @param listener The container listener instance.
   * @see #removeClearedListener(ResourcesContainerClearedListener)
   */
  public void addClearedListener(ResourcesContainerClearedListener listener) {
    this.clearedListeners.add(listener);
  }

  /**
   * Remove the specified listener from this container.
   *
   * @param listener The listener instance that was previously added to this container.
   * @see #addClearedListener(ResourcesContainerClearedListener)
   */
  public void removeClearedListener(ResourcesContainerClearedListener listener) {
    this.clearedListeners.remove(listener);
  }

  /**
   * Add the specified resource to this container.<br>
   * The added element can later be retrieved from this container by calling {@code
   * get(resourceName)}.
   *
   * <p>Use this method to make a resource accessible over this container during runtime.
   *
   * @param resourceName The name that the resource is managed by.
   * @param resource The resource instance.
   * @see #get(Predicate)
   * @see #get(String)
   * @see #get(String, boolean)
   * @see #remove(String)
   * @see #tryGet(String)
   */
  public void add(@Nullable String resourceName, @Nullable T resource) {
    this.resources.put(resourceName, resource);

    for (ResourcesContainerListener<? super T> listener : this.listeners) {
      listener.added(resourceName, resource);
    }
  }

  public void add(@Nullable URL resourceName, T resource) {
    this.add(resourceName.toString(), resource);
```

Give me the fixed code snippet (ONLY THE METHOD REWRITE OF "add(java.net.URL,T)") in XML format in <response> tag like the example below. I will apply the fix to my codebase.
Do not import any additional libraries or classes or java comments.
If you can provide the fixed code snippet, provide it in the following format and place the code snippet in the <code> tag within ```java block.
<response>
  <success>true</success>
  <code><![CDATA[
  ```java
  Your fixed code snippet here
  ```
    ]]>
  </code>
</response>

---ChatGPT.sendRequestToOpenAI---
Sending request to OpenAI...
---ChatGPT.sendRequestToOpenAI---
Response received from OpenAI.
---Response.<init>---
Creating Response:
```xml
<response>
  <success>true</success>
  <code><![CDATA[
  ```java
  public void add(@Nullable URL resourceName, T resource) {
    if (resourceName != null) {
      this.add(resourceName.toString(), resource);
    } else {
      throw new IllegalArgumentException("resourceName cannot be null");
    }
  }
  ```
    ]]>
  </code>
</response>
```
---Response.<init>---
Response created:
public void add(@Nullable URL resourceName, T resource) {
    if (resourceName != null) {
      this.add(resourceName.toString(), resource);
    } else {
      throw new IllegalArgumentException("resourceName cannot be null");
    }
  }
