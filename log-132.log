====================
Type='DEREFERENCE_NULLABLE', message='dereferenced expression shadowType is @Nullable'
/home/nima/Developer/nullness-benchmarks/litiengine/src/de/gurkenlabs/litiengine/entities/StaticShadow.java:209
    if (shadowType.equals(StaticShadowType.DOWN)) {
Log:
---NullAway.lambda$resolveRemainingErrors$17---
==============================
---NullAway.lambda$resolveRemainingErrors$17---
TOP LEVEL CALL TO FIX ERROR: Type='DEREFERENCE_NULLABLE', message='dereferenced expression shadowType is @Nullable'
/home/nima/Developer/nullness-benchmarks/litiengine/src/de/gurkenlabs/litiengine/entities/StaticShadow.java:209
    if (shadowType.equals(StaticShadowType.DOWN)) {
---ChatGPT.ask---
Asking ChatGPT:
I want to resolve a warning reported by NullAway.
The error is of the type of "DEREFERENCE_NULLABLE" and the full error message is: "dereferenced expression shadowType is @Nullable".
The line with the error is: "    if (shadowType.equals(StaticShadowType.DOWN)) {".

The error is within "the method: createArea()" and the code surrounding the error is:
```java
  /**
   * Instantiates a new {@code StaticShadow} entity.
   *
   * @param shadowType The type of the static shadow.
   */
  public StaticShadow(StaticShadowType shadowType) {
    this.shadowType = shadowType;
    this.shadowOffset = DEFAULT_OFFSET;
    this.origin = null;
  }

  /**
   * Instantiates a new {@code StaticShadow} entity.
   *
   * @param x The x-coordinate of this instance.
   * @param y The y-coordinate of this instance.
   * @param width The width of this instance.
   * @param height The height of this instance.
   * @param shadowType The type of the static shadow.
   */
  public StaticShadow(double x, double y, float width, float height, StaticShadowType shadowType) {
    this(0, null, x, y, width, height, shadowType);
  }

  /**
   * Instantiates a new {@code StaticShadow} entity.
   *
   * @param id The id of this entity.
   * @param x The x-coordinate of this instance.
   * @param y The y-coordinate of this instance.
   * @param width The width of this instance.
   * @param height The height of this instance.
   * @param shadowType The type of the static shadow.
   */
  public StaticShadow(
      int id, double x, double y, float width, float height, StaticShadowType shadowType) {
    this(id, null, x, y, width, height, shadowType);
  }

  /**
   * Instantiates a new {@code StaticShadow} entity.
   *
   * @param id The id of this entity.
   * @param name The name of this entity.
   * @param x The x-coordinate of this instance.
   * @param y The y-coordinate of this instance.
   * @param width The width of this instance.
   * @param height The height of this instance.
   * @param shadowType The type of the static shadow.
   */
  public StaticShadow(
      int id,
      @Nullable String name,
      double x,
      double y,
      float width,
      float height,
      StaticShadowType shadowType) {
    super(id, name, x, y, width, height);
    this.setShadowType(shadowType);
    this.origin = null;
    this.shadowOffset = DEFAULT_OFFSET;
  }

  /**
   * Instantiates a new {@code StaticShadow} entity.
   *
   * @param collisionBox The collision box from which this shadow instance originates from.
   */
  public StaticShadow(CollisionBox collisionBox) {
    super(
        0,
        null,
        collisionBox.getX(),
        collisionBox.getY(),
        collisionBox.getWidth(),
        collisionBox.getHeight());
    this.setShadowType(StaticShadowType.NONE);
    this.origin = collisionBox;
    this.shadowOffset = DEFAULT_OFFSET;
  }

  @Nullable
  public StaticShadowType getShadowType() {
    return this.shadowType;
  }

  public void setShadowType(final StaticShadowType shadowType) {
    this.shadowType = shadowType;
    this.area = null;
  }

  @Override
  public void setX(double x) {
    super.setX(x);
    this.area = null;
  }

  @Override
  public void setY(double y) {
    super.setY(y);
    this.area = null;
  }

  @Override
  public void setWidth(final double width) {
    super.setWidth(width);
    this.area = null;
  }

  @Override
  public void setHeight(final double height) {
    super.setHeight(height);
    this.area = null;
  }

  @Override
  public void setLocation(final Point2D location) {
    super.setLocation(location);
    this.area = null;
  }

  @Nullable
  public CollisionBox getOrigin() {
    return this.origin;
  }

  @Override
  public String toString() {
    if (this.getOrigin() == null) {
      return super.toString();
    }

    return "[" + this.getOrigin().toString() + "] -> " + super.toString();
  }

  @Override
  public Rectangle2D getBoundingBox() {
    if (this.getArea() == null) {
      return super.getBoundingBox();
    }

    return this.getArea().getBounds2D();
  }

  @Nullable
  public Area getArea() {
    if (this.getShadowType() == StaticShadowType.NONE) {
      return null;
    }

    if (this.area == null) {
      this.createArea();
    }
    return this.area;
  }

  private void createArea() {
    if (this.getShadowType() == StaticShadowType.NONE) {
      return;
    }

    final Path2D parallelogram = new Path2D.Double();
    final double right = this.getX() + this.getWidth();
    final double bottom = this.getY() + this.getHeight();

    parallelogram.moveTo(this.getX(), this.getY());
    parallelogram.lineTo(right, this.getY());
    if (shadowType.equals(StaticShadowType.DOWN)) {
      parallelogram.lineTo(right, bottom + this.getOffset());
      parallelogram.lineTo(this.getX(), bottom + this.getOffset());
    } else if (shadowType.equals(StaticShadowType.DOWNLEFT)) {
      parallelogram.lineTo(right, bottom);
      parallelogram.lineTo(right - this.getOffset() / 2.0, bottom + this.getOffset());
      parallelogram.lineTo(this.getX(), bottom + this.getOffset());
    } else if (shadowType.equals(StaticShadowType.DOWNRIGHT)) {
      parallelogram.lineTo(right, bottom);
      parallelogram.lineTo(right + this.getOffset() / 2.0, bottom + this.getOffset());
      parallelogram.lineTo(this.getX(), bottom + this.getOffset());
    } else if (shadowType.equals(StaticShadowType.LEFT)) {
      parallelogram.lineTo(right, bottom);
      parallelogram.lineTo(right - this.getOffset() / 2.0, bottom + this.getOffset());
      parallelogram.lineTo(this.getX() - this.getOffset() / 2.0, bottom + this.getOffset());
      parallelogram.lineTo(this.getX(), bottom);
    } else if (shadowType.equals(StaticShadowType.LEFTDOWN)) {
      parallelogram.lineTo(right, bottom);
      parallelogram.lineTo(right, bottom + this.getOffset());
      parallelogram.lineTo(this.getX() - this.getOffset() / 2.0, bottom + this.getOffset());
      parallelogram.lineTo(this.getX(), bottom);
    } else if (shadowType.equals(StaticShadowType.LEFTRIGHT)) {
      parallelogram.lineTo(right, bottom);
      parallelogram.lineTo(right + this.getOffset() / 2.0, bottom + this.getOffset());
      parallelogram.lineTo(this.getX() - this.getOffset() / 2.0, bottom + this.getOffset());
      parallelogram.lineTo(this.getX(), bottom);
    } else if (shadowType.equals(StaticShadowType.RIGHTLEFT)) {
      parallelogram.lineTo(right, bottom);
      parallelogram.lineTo(right - this.getOffset() / 2.0, bottom + this.getOffset());
      parallelogram.lineTo(this.getX() + this.getOffset() / 2.0, bottom + this.getOffset());
      parallelogram.lineTo(this.getX(), bottom);
    } else if (shadowType.equals(StaticShadowType.RIGHT)) {
      parallelogram.lineTo(right, bottom);
      parallelogram.lineTo(right + this.getOffset() / 2.0, bottom + this.getOffset());
      parallelogram.lineTo(this.getX() + this.getOffset() / 2.0, bottom + this.getOffset());
      parallelogram.lineTo(this.getX(), bottom);
    } else if (shadowType.equals(StaticShadowType.RIGHTDOWN)) {
      parallelogram.lineTo(right, bottom);
      parallelogram.lineTo(right, bottom + this.getOffset());
      parallelogram.lineTo(this.getX() + this.getOffset() / 2.0, bottom + this.getOffset());
      parallelogram.lineTo(this.getX(), bottom);
    } else if (shadowType.equals(StaticShadowType.NOOFFSET)) {
      parallelogram.lineTo(right, bottom);
      parallelogram.lineTo(this.getX(), bottom);
    }

    parallelogram.closePath();
    this.area = new Area(parallelogram);
```

Give me the fixed code snippet (ONLY THE METHOD REWRITE OF "createArea()") in XML format in <response> tag like the example below. I will apply the fix to my codebase.
Do not import any additional libraries or classes or java comments.
If you can provide the fixed code snippet, provide it in the following format and place the code snippet in the <code> tag within ```java block.
<response>
  <success>true</success>
  <code><![CDATA[
  ```java
  Your fixed code snippet here
  ```
    ]]>
  </code>
</response>

---ChatGPT.sendRequestToOpenAI---
Sending request to OpenAI...
---ChatGPT.sendRequestToOpenAI---
Response received from OpenAI.
---Response.<init>---
Creating Response:
```xml
<response>
  <success>true</success>
  <code><![CDATA[
  ```java
  private void createArea() {
    StaticShadowType shadowType = this.getShadowType();
    if (shadowType == StaticShadowType.NONE) {
      return;
    }

    final Path2D parallelogram = new Path2D.Double();
    final double right = this.getX() + this.getWidth();
    final double bottom = this.getY() + this.getHeight();

    parallelogram.moveTo(this.getX(), this.getY());
    parallelogram.lineTo(right, this.getY());
    if (shadowType != null && shadowType.equals(StaticShadowType.DOWN)) {
      parallelogram.lineTo(right, bottom + this.getOffset());
      parallelogram.lineTo(this.getX(), bottom + this.getOffset());
    } else if (shadowType != null && shadowType.equals(StaticShadowType.DOWNLEFT)) {
      parallelogram.lineTo(right, bottom);
      parallelogram.lineTo(right - this.getOffset() / 2.0, bottom + this.getOffset());
      parallelogram.lineTo(this.getX(), bottom + this.getOffset());
    } else if (shadowType != null && shadowType.equals(StaticShadowType.DOWNRIGHT)) {
      parallelogram.lineTo(right, bottom);
      parallelogram.lineTo(right + this.getOffset() / 2.0, bottom + this.getOffset());
      parallelogram.lineTo(this.getX(), bottom + this.getOffset());
    } else if (shadowType != null && shadowType.equals(StaticShadowType.LEFT)) {
      parallelogram.lineTo(right, bottom);
      parallelogram.lineTo(right - this.getOffset() / 2.0, bottom + this.getOffset());
      parallelogram.lineTo(this.getX() - this.getOffset() / 2.0, bottom + this.getOffset());
      parallelogram.lineTo(this.getX(), bottom);
    } else if (shadowType != null && shadowType.equals(StaticShadowType.LEFTDOWN)) {
      parallelogram.lineTo(right, bottom);
      parallelogram.lineTo(right, bottom + this.getOffset());
      parallelogram.lineTo(this.getX() - this.getOffset() / 2.0, bottom + this.getOffset());
      parallelogram.lineTo(this.getX(), bottom);
    } else if (shadowType != null && shadowType.equals(StaticShadowType.LEFTRIGHT)) {
      parallelogram.lineTo(right, bottom);
      parallelogram.lineTo(right + this.getOffset() / 2.0, bottom + this.getOffset());
      parallelogram.lineTo(this.getX() - this.getOffset() / 2.0, bottom + this.getOffset());
      parallelogram.lineTo(this.getX(), bottom);
    } else if (shadowType != null && shadowType.equals(StaticShadowType.RIGHTLEFT)) {
      parallelogram.lineTo(right, bottom);
      parallelogram.lineTo(right - this.getOffset() / 2.0, bottom + this.getOffset());
      parallelogram.lineTo(this.getX() + this.getOffset() / 2.0, bottom + this.getOffset());
      parallelogram.lineTo(this.getX(), bottom);
    } else if (shadowType != null && shadowType.equals(StaticShadowType.RIGHT)) {
      parallelogram.lineTo(right, bottom);
      parallelogram.lineTo(right + this.getOffset() / 2.0, bottom + this.getOffset());
      parallelogram.lineTo(this.getX() + this.getOffset() / 2.0, bottom + this.getOffset());
      parallelogram.lineTo(this.getX(), bottom);
    } else if (shadowType != null && shadowType.equals(StaticShadowType.RIGHTDOWN)) {
      parallelogram.lineTo(right, bottom);
      parallelogram.lineTo(right, bottom + this.getOffset());
      parallelogram.lineTo(this.getX() + this.getOffset() / 2.0, bottom + this.getOffset());
      parallelogram.lineTo(this.getX(), bottom);
    } else if (shadowType != null && shadowType.equals(StaticShadowType.NOOFFSET)) {
      parallelogram.lineTo(right, bottom);
      parallelogram.lineTo(this.getX(), bottom);
    }

    parallelogram.closePath();
    this.area = new Area(parallelogram);
  }
  ```
    ]]>
  </code>
</response>
```
---Response.<init>---
Response created:
private void createArea() {
    StaticShadowType shadowType = this.getShadowType();
    if (shadowType == StaticShadowType.NONE) {
      return;
    }

    final Path2D parallelogram = new Path2D.Double();
    final double right = this.getX() + this.getWidth();
    final double bottom = this.getY() + this.getHeight();

    parallelogram.moveTo(this.getX(), this.getY());
    parallelogram.lineTo(right, this.getY());
    if (shadowType != null && shadowType.equals(StaticShadowType.DOWN)) {
      parallelogram.lineTo(right, bottom + this.getOffset());
      parallelogram.lineTo(this.getX(), bottom + this.getOffset());
    } else if (shadowType != null && shadowType.equals(StaticShadowType.DOWNLEFT)) {
      parallelogram.lineTo(right, bottom);
      parallelogram.lineTo(right - this.getOffset() / 2.0, bottom + this.getOffset());
      parallelogram.lineTo(this.getX(), bottom + this.getOffset());
    } else if (shadowType != null && shadowType.equals(StaticShadowType.DOWNRIGHT)) {
      parallelogram.lineTo(right, bottom);
      parallelogram.lineTo(right + this.getOffset() / 2.0, bottom + this.getOffset());
      parallelogram.lineTo(this.getX(), bottom + this.getOffset());
    } else if (shadowType != null && shadowType.equals(StaticShadowType.LEFT)) {
      parallelogram.lineTo(right, bottom);
      parallelogram.lineTo(right - this.getOffset() / 2.0, bottom + this.getOffset());
      parallelogram.lineTo(this.getX() - this.getOffset() / 2.0, bottom + this.getOffset());
      parallelogram.lineTo(this.getX(), bottom);
    } else if (shadowType != null && shadowType.equals(StaticShadowType.LEFTDOWN)) {
      parallelogram.lineTo(right, bottom);
      parallelogram.lineTo(right, bottom + this.getOffset());
      parallelogram.lineTo(this.getX() - this.getOffset() / 2.0, bottom + this.getOffset());
      parallelogram.lineTo(this.getX(), bottom);
    } else if (shadowType != null && shadowType.equals(StaticShadowType.LEFTRIGHT)) {
      parallelogram.lineTo(right, bottom);
      parallelogram.lineTo(right + this.getOffset() / 2.0, bottom + this.getOffset());
      parallelogram.lineTo(this.getX() - this.getOffset() / 2.0, bottom + this.getOffset());
      parallelogram.lineTo(this.getX(), bottom);
    } else if (shadowType != null && shadowType.equals(StaticShadowType.RIGHTLEFT)) {
      parallelogram.lineTo(right, bottom);
      parallelogram.lineTo(right - this.getOffset() / 2.0, bottom + this.getOffset());
      parallelogram.lineTo(this.getX() + this.getOffset() / 2.0, bottom + this.getOffset());
      parallelogram.lineTo(this.getX(), bottom);
    } else if (shadowType != null && shadowType.equals(StaticShadowType.RIGHT)) {
      parallelogram.lineTo(right, bottom);
      parallelogram.lineTo(right + this.getOffset() / 2.0, bottom + this.getOffset());
      parallelogram.lineTo(this.getX() + this.getOffset() / 2.0, bottom + this.getOffset());
      parallelogram.lineTo(this.getX(), bottom);
    } else if (shadowType != null && shadowType.equals(StaticShadowType.RIGHTDOWN)) {
      parallelogram.lineTo(right, bottom);
      parallelogram.lineTo(right, bottom + this.getOffset());
      parallelogram.lineTo(this.getX() + this.getOffset() / 2.0, bottom + this.getOffset());
      parallelogram.lineTo(this.getX(), bottom);
    } else if (shadowType != null && shadowType.equals(StaticShadowType.NOOFFSET)) {
      parallelogram.lineTo(right, bottom);
      parallelogram.lineTo(this.getX(), bottom);
    }

    parallelogram.closePath();
    this.area = new Area(parallelogram);
  }
