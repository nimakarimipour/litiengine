====================
Type='DEREFERENCE_NULLABLE', message='dereferenced expression mapObject.getType() is @Nullable'
/home/nima/Developer/nullness-benchmarks/litiengine/src/de/gurkenlabs/litiengine/environment/MapObjectLoader.java:101
    if (!mapObject.getType().equalsIgnoreCase(this.getMapObjectType())) {
Log:
---NullAway.lambda$resolveRemainingErrors$17---
==============================
---NullAway.lambda$resolveRemainingErrors$17---
TOP LEVEL CALL TO FIX ERROR: Type='DEREFERENCE_NULLABLE', message='dereferenced expression mapObject.getType() is @Nullable'
/home/nima/Developer/nullness-benchmarks/litiengine/src/de/gurkenlabs/litiengine/environment/MapObjectLoader.java:101
    if (!mapObject.getType().equalsIgnoreCase(this.getMapObjectType())) {
---ChatGPT.ask---
Asking ChatGPT:
I want to resolve a warning reported by NullAway.
The error is of the type of "DEREFERENCE_NULLABLE" and the full error message is: "dereferenced expression mapObject.getType() is @Nullable".
The line with the error is: "    if (!mapObject.getType().equalsIgnoreCase(this.getMapObjectType())) {".

The error is within "the method: isMatchingType(de.gurkenlabs.litiengine.environment.tilemap.IMapObject)" and the code surrounding the error is:
```java
package de.gurkenlabs.litiengine.environment;

import de.gurkenlabs.litiengine.entities.IEntity;
import de.gurkenlabs.litiengine.environment.tilemap.IMapObject;
import de.gurkenlabs.litiengine.environment.tilemap.MapObjectProperty;
import de.gurkenlabs.litiengine.environment.tilemap.MapObjectType;
import de.gurkenlabs.litiengine.environment.tilemap.TmxProperty;
import de.gurkenlabs.litiengine.graphics.RenderType;
import de.gurkenlabs.litiengine.util.ReflectionUtilities;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Collection;
import java.util.logging.Level;
import java.util.logging.Logger;

public abstract class MapObjectLoader implements IMapObjectLoader {
  private static final Logger log = Logger.getLogger(MapObjectLoader.class.getName());
  private final String mapObjectType;

  protected MapObjectLoader(String mapObjectType) {
    this.mapObjectType = mapObjectType;
  }

  protected MapObjectLoader(MapObjectType mapObjectType) {
    this.mapObjectType = mapObjectType.name();
  }

  @Override
  public String getMapObjectType() {
    return this.mapObjectType;
  }

  /**
   * Loads engine default properties to the specified {@code IEntity} instance:
   *
   * <ul>
   *   <li>width, height
   *   <li>mapId
   *   <li>name
   *   <li>location
   *   <li>tags
   * </ul>
   *
   * Also, this supports predefined {@code CustomMapObjectProperties}. It loads the specified custom
   * properties via reflection.
   *
   * @param entity The entity instance that will be initialized.
   * @param mapObject The mapObject that provides the static information for the new entity.
   * @see TmxProperty
   */
  public static void loadDefaultProperties(IEntity entity, IMapObject mapObject) {
    entity.setMapId(mapObject.getId());
    entity.setWidth(mapObject.getWidth());
    entity.setHeight(mapObject.getHeight());
    entity.setName(mapObject.getName());
    entity.setLocation(mapObject.getLocation());
    if (mapObject.hasCustomProperty(MapObjectProperty.RENDERWITHLAYER)) {
      entity.setRenderWithLayer(mapObject.getBoolValue(MapObjectProperty.RENDERWITHLAYER));
    }

    String tagsString = mapObject.getStringValue(MapObjectProperty.TAGS);
    if (tagsString != null && tagsString.trim().length() > 0) {
      String[] tags = tagsString.split(",");

      for (String rawTag : tags) {
        String tag = rawTag.trim().replaceAll("[^A-Za-z0-9\\-\\_]", "");
        if (tag == null || tag.isEmpty()) {
          continue;
        }

        entity.addTag(tag);
      }
    }

    RenderType renderType = mapObject.getEnumValue(MapObjectProperty.RENDERTYPE, RenderType.class);
    if (renderType != null) {
      entity.setRenderType(renderType);
    }

    loadCustomMapObjectProperties(entity, mapObject);

    mapObject
        .getProperties()
        .forEach(
            (name, property) -> {
              if (MapObjectProperty.isCustom(name)) {
                entity.getProperties().setValue(name, property);
              }
            });
  }

  public void afterLoad(Collection<IEntity> entities, IMapObject mapObject) {
    for (IEntity entity : entities) {
      callAfterTmxUnmarshal(entity, mapObject);
    }
  }

  protected boolean isMatchingType(IMapObject mapObject) {
    if (!mapObject.getType().equalsIgnoreCase(this.getMapObjectType())) {
      log.log(
          Level.SEVERE,
          "Cannot load a mapobject of the type [{0}] with a loader of type [{1}].",
          new Object[] {mapObject.getType(), this.getClass()});
      return false;
    }

    return true;
```

Give me the fixed code snippet (ONLY THE METHOD REWRITE OF "isMatchingType(de.gurkenlabs.litiengine.environment.tilemap.IMapObject)") in XML format in <response> tag like the example below. I will apply the fix to my codebase.
Do not import any additional libraries or classes or java comments.
If you can provide the fixed code snippet, provide it in the following format and place the code snippet in the <code> tag within ```java block.
<response>
  <success>true</success>
  <code><![CDATA[
  ```java
  Your fixed code snippet here
  ```
    ]]>
  </code>
</response>

---ChatGPT.sendRequestToOpenAI---
Sending request to OpenAI...
---ChatGPT.sendRequestToOpenAI---
Response received from OpenAI.
---Response.<init>---
Creating Response:
```xml
<response>
  <success>true</success>
  <code><![CDATA[
  ```java
  protected boolean isMatchingType(IMapObject mapObject) {
    if (mapObject.getType() == null || !mapObject.getType().equalsIgnoreCase(this.getMapObjectType())) {
      log.log(
          Level.SEVERE,
          "Cannot load a mapobject of the type [{0}] with a loader of type [{1}].",
          new Object[] {mapObject.getType(), this.getClass()});
      return false;
    }

    return true;
  }
  ```
    ]]>
  </code>
</response>
```
---Response.<init>---
Response created:
protected boolean isMatchingType(IMapObject mapObject) {
    if (mapObject.getType() == null || !mapObject.getType().equalsIgnoreCase(this.getMapObjectType())) {
      log.log(
          Level.SEVERE,
          "Cannot load a mapobject of the type [{0}] with a loader of type [{1}].",
          new Object[] {mapObject.getType(), this.getClass()});
      return false;
    }

    return true;
  }
