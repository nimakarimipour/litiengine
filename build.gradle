buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'java'
    id 'com.stehno.natives' version '0.3.1'
    id 'org.sonarqube' version '3.1.1'
    id 'jacoco'
    id("net.ltgt.errorprone") version "4.1.0"
}

repositories {
    mavenLocal()
    mavenCentral()
}


natives {
    configurations = ['runtimeClasspath']
    outputDir = 'libs'
}

archivesBaseName = "litiengine"
version = "v0.5.1-beta"

sourceSets {
    main.java.srcDir "src"
    main.resources.srcDir "resources"

    test.java.srcDir "tests"
    test.resources.srcDir "tests"
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'net.java.jinput:jinput:2.0.9'
    implementation 'net.java.jinput:jinput:2.0.9:natives-all'
    implementation 'com.googlecode.soundlibs:jorbis:0.0.17.4'
    implementation 'com.googlecode.soundlibs:tritonus-share:0.3.7.4'
    implementation 'com.googlecode.soundlibs:vorbisspi:1.0.3.3'
    implementation('com.googlecode.soundlibs:mp3spi:1.9.5.4') {
        exclude group: 'junit'
    }

    implementation 'com.code-disaster.steamworks4j:steamworks4j:1.8.0'

    // JAXB modules for JDK 9 or higher
    implementation 'javax.activation:javax.activation-api:1.2.0'
    implementation 'javax.xml.bind:jaxb-api:2.4.0-b180830.0359'
    implementation 'com.sun.xml.bind:jaxb-core:2.3.0.1'
    implementation 'com.sun.xml.bind:jaxb-impl:2.3.2'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.6.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.0'
    testImplementation 'org.mockito:mockito-core:3.4.0'
    testImplementation 'org.mockito:mockito-inline:3.4.0'

    annotationProcessor "com.uber.nullaway:nullaway:0.12.1"
    annotationProcessor "edu.ucr.cs.riple.annotator:annotator-scanner:1.3.15"

    compileOnly "com.google.code.findbugs:jsr305:3.0.2"
    errorprone "com.google.errorprone:error_prone_core:2.35.1"
    errorproneJavac "com.google.errorprone:javac:9+181-r4173-1"
    compileOnly "com.uber.nullaway:nullaway-annotations:0.12.1"

    implementation "org.jetbrains:annotations:24.0.1"
}

def scanner_path = project.rootProject.projectDir.toString() + "/annotator-out/scanner.xml"
def nullaway_path = project.rootProject.projectDir.toString() + "/annotator-out/nullaway.xml"

import net.ltgt.gradle.errorprone.CheckSeverity
tasks.withType(JavaCompile) {
    options.errorprone.disableAllChecks = true
    options.errorprone.disableAllWarnings = true
    // remove the if condition if you want to run NullAway on test code
    if (!name.toLowerCase().contains("test")) {
        options.errorprone {
            check("NullAway", CheckSeverity.ERROR)
            check("AnnotatorScanner", CheckSeverity.OFF)
            option("NullAway:AnnotatedPackages", "de.gurkenlabs.litiengine")
            option("NullAway:SerializeFixMetadata", "true")
            option("NullAway:FixSerializationConfigPath", nullaway_path)
            option("AnnotatorScanner:ConfigPath", scanner_path)
        }
    }
    options.compilerArgs << "-Xmaxerrs" << "100000"
    options.compilerArgs << "-Xmaxwarns" << "100000"
}

test {
    useJUnitPlatform()
    testLogging.showStandardStreams = true
	testLogging {
    events "passed", "skipped", "failed"
    exceptionFormat "full" }
}

jar {
    from {
        configurations.compileClasspath.collect { zipTree it }
    }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    exclude 'META-INF/services/**'
    exclude 'module-info.*'
    exclude '**/*.dll'
    exclude '**/*.jnilib'
    exclude '**/*.dylib'
    exclude '**/*.so'
    exclude 'junit**/**'
}

task createJavadocs(type: Javadoc) {
    source sourceSets.main.allJava
    classpath = project.sourceSets.main.runtimeClasspath
    options.encoding 'UTF-8'
    // options.addBooleanOption('html5', true)
    dependsOn build
}

task distZip(type: Zip) {
    group 'build'
    from 'build/libs/'
    include '*'
    exclude archiveFileName.get()
    destinationDirectory = file('build/libs/')

    dependsOn ":utiliti:build"
    dependsOn ":utiliti:distZipLinuxMac"
}

task fullbuild {
    group 'build'
    description 'executes the build including coverage reports and javadoc'


    dependsOn createJavadocs
    dependsOn test
    dependsOn jacocoTestReport
    dependsOn distZip
}

task copyLicense(type: Copy) {
    from(new File('.')) { include 'LICENSE' }
    into new File(buildDir, 'libs')
}

compileJava.dependsOn includeNatives
includeNatives.dependsOn copyLicense

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

// These --add-exports arguments are required when targeting JDK 11+ since Error Prone and NullAway access a bunch of
// JDK-internal APIs that are not exposed otherwise.
tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += [
            "--add-exports=jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED",
            "--add-exports=jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED",
            "--add-exports=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED",
            "--add-exports=jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED",
            "--add-exports=jdk.compiler/com.sun.tools.javac.main=ALL-UNNAMED",
            "--add-exports=jdk.compiler/com.sun.tools.javac.model=ALL-UNNAMED",
            "--add-exports=jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED",
            "--add-exports=jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED",
            "--add-exports=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED",
            "--add-exports=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED",
            "--add-exports=jdk.compiler/com.sun.source.tree=ALL-UNNAMED",
    ]
}

