====================
Type='DEREFERENCE_NULLABLE', message='dereferenced expression this.data().getTexts() is @Nullable'
/home/nima/Developer/nullness-benchmarks/litiengine/src/de/gurkenlabs/litiengine/graphics/emitters/Emitter.java:374
        if (this.data().getTexts().isEmpty()) {
Log:
---NullAway.lambda$resolveRemainingErrors$17---
==============================
---NullAway.lambda$resolveRemainingErrors$17---
TOP LEVEL CALL TO FIX ERROR: Type='DEREFERENCE_NULLABLE', message='dereferenced expression this.data().getTexts() is @Nullable'
/home/nima/Developer/nullness-benchmarks/litiengine/src/de/gurkenlabs/litiengine/graphics/emitters/Emitter.java:374
        if (this.data().getTexts().isEmpty()) {
---ChatGPT.ask---
Asking ChatGPT:
I want to resolve a warning reported by NullAway.
The error is of the type of "DEREFERENCE_NULLABLE" and the full error message is: "dereferenced expression this.data().getTexts() is @Nullable".
The line with the error is: "        if (this.data().getTexts().isEmpty()) {".

The error is within "the method: createNewParticle()" and the code surrounding the error is:
```java
@Nullable
  protected Particle createNewParticle() {

    float width = (float) this.data().getParticleWidth().get();
    float height = (float) this.data().getParticleHeight().get();

    Particle particle;
    switch (this.data().getParticleType()) {
      case ELLIPSE:
        particle = new EllipseParticle(width, height);
        break;
      case RECTANGLE:
        particle = new RectangleParticle(width, height);
        break;
      case TRIANGLE:
        particle = new PolygonParticle(width, height, 3);
        break;
      case DIAMOND:
        particle = new PolygonParticle(width, height, 4);
        break;
      case LINE:
        particle = new LineParticle(width, height);
        break;
      case TEXT:
        String text;
        if (this.data().getTexts().isEmpty()) {
          text = EmitterData.DEFAULT_TEXT;
        } else {
          text = Game.random().choose(this.data().getTexts());
        }
        particle = new TextParticle(text);
        break;
      case SPRITE:
        Spritesheet sprite = Resources.spritesheets().get(this.data().getSpritesheet());
        if (sprite == null || sprite.getTotalNumberOfSprites() <= 0) {
          return null;
        }
        particle = new SpriteParticle(sprite);
        ((SpriteParticle) particle).setAnimateSprite(this.data().isAnimatingSprite());
        ((SpriteParticle) particle).setLoopSprite(this.data().isLoopingSprite());
        break;
      default:
        particle = new RectangleParticle(width, height);
        break;
    }
    return particle.init(this.data());
}
```

Give me the fixed code snippet (ONLY THE METHOD REWRITE OF "createNewParticle()") in XML format in <response> tag like the example below. I will apply the fix to my codebase.
Do not import any additional libraries or classes or java comments.
If you can provide the fixed code snippet, provide it in the following format and place the code snippet in the <code> tag within ```java block.
<response>
  <success>true</success>
  <code><![CDATA[
  ```java
  Your fixed code snippet here
  ```
    ]]>
  </code>
</response>

---ChatGPT.sendRequestToOpenAI---
Sending request to OpenAI...
---ChatGPT.sendRequestToOpenAI---
Response received from OpenAI.
---Response.<init>---
Creating Response:
```xml
<response>
  <success>true</success>
  <code><![CDATA[
  ```java
  protected Particle createNewParticle() {

    float width = (float) this.data().getParticleWidth().get();
    float height = (float) this.data().getParticleHeight().get();

    Particle particle;
    switch (this.data().getParticleType()) {
      case ELLIPSE:
        particle = new EllipseParticle(width, height);
        break;
      case RECTANGLE:
        particle = new RectangleParticle(width, height);
        break;
      case TRIANGLE:
        particle = new PolygonParticle(width, height, 3);
        break;
      case DIAMOND:
        particle = new PolygonParticle(width, height, 4);
        break;
      case LINE:
        particle = new LineParticle(width, height);
        break;
      case TEXT:
        String text;
        if (this.data().getTexts() == null || this.data().getTexts().isEmpty()) {
          text = EmitterData.DEFAULT_TEXT;
        } else {
          text = Game.random().choose(this.data().getTexts());
        }
        particle = new TextParticle(text);
        break;
      case SPRITE:
        Spritesheet sprite = Resources.spritesheets().get(this.data().getSpritesheet());
        if (sprite == null || sprite.getTotalNumberOfSprites() <= 0) {
          return null;
        }
        particle = new SpriteParticle(sprite);
        ((SpriteParticle) particle).setAnimateSprite(this.data().isAnimatingSprite());
        ((SpriteParticle) particle).setLoopSprite(this.data().isLoopingSprite());
        break;
      default:
        particle = new RectangleParticle(width, height);
        break;
    }
    return particle.init(this.data());
  }
  ```
  ]]>
  </code>
</response>
```
---Response.<init>---
Response created:
protected Particle createNewParticle() {

    float width = (float) this.data().getParticleWidth().get();
    float height = (float) this.data().getParticleHeight().get();

    Particle particle;
    switch (this.data().getParticleType()) {
      case ELLIPSE:
        particle = new EllipseParticle(width, height);
        break;
      case RECTANGLE:
        particle = new RectangleParticle(width, height);
        break;
      case TRIANGLE:
        particle = new PolygonParticle(width, height, 3);
        break;
      case DIAMOND:
        particle = new PolygonParticle(width, height, 4);
        break;
      case LINE:
        particle = new LineParticle(width, height);
        break;
      case TEXT:
        String text;
        if (this.data().getTexts() == null || this.data().getTexts().isEmpty()) {
          text = EmitterData.DEFAULT_TEXT;
        } else {
          text = Game.random().choose(this.data().getTexts());
        }
        particle = new TextParticle(text);
        break;
      case SPRITE:
        Spritesheet sprite = Resources.spritesheets().get(this.data().getSpritesheet());
        if (sprite == null || sprite.getTotalNumberOfSprites() <= 0) {
          return null;
        }
        particle = new SpriteParticle(sprite);
        ((SpriteParticle) particle).setAnimateSprite(this.data().isAnimatingSprite());
        ((SpriteParticle) particle).setLoopSprite(this.data().isLoopingSprite());
        break;
      default:
        particle = new RectangleParticle(width, height);
        break;
    }
    return particle.init(this.data());
  }
