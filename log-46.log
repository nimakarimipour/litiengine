====================
Type='DEREFERENCE_NULLABLE', message='dereferenced expression value is @Nullable'
/home/nima/Developer/nullness-benchmarks/litiengine/src/de/gurkenlabs/litiengine/environment/tilemap/xml/TileData.java:348
    String[] csvTileIds = value.trim().split("[\\s]*,[\\s]*");
Log:
11:41:24.428 TRACE edu.ucr.cs.riple.core.checkers.nullaway.NullAway.lambda$resolveRemainingErrors$19
==============================
11:41:24.428 TRACE edu.ucr.cs.riple.core.checkers.nullaway.NullAway.lambda$resolveRemainingErrors$19
CHATGPT.COUNT = 1
11:41:24.428 TRACE edu.ucr.cs.riple.core.checkers.nullaway.NullAway.lambda$resolveRemainingErrors$19
CHATGPT.PROMPTS SIZE = 1
11:41:24.428 TRACE edu.ucr.cs.riple.core.checkers.nullaway.NullAway.lambda$resolveRemainingErrors$19
Both set to 0 and cleared 0
11:41:24.428 TRACE edu.ucr.cs.riple.core.checkers.nullaway.NullAway.lambda$resolveRemainingErrors$19
46 : TOP LEVEL CALL TO FIX ERROR: Type='DEREFERENCE_NULLABLE', message='dereferenced expression value is @Nullable'
/home/nima/Developer/nullness-benchmarks/litiengine/src/de/gurkenlabs/litiengine/environment/tilemap/xml/TileData.java:348
    String[] csvTileIds = value.trim().split("[\\s]*,[\\s]*");
11:41:25.926 TRACE edu.ucr.cs.riple.core.checkers.nullaway.codefix.ChatGPT.ask
Asking ChatGPT:
I want to resolve a warning reported by NullAway.
The error is of the type of "DEREFERENCE_NULLABLE" and the full error message is: "dereferenced expression value is @Nullable".
The line with the error is: "    String[] csvTileIds = value.trim().split("[\\s]*,[\\s]*");".

The error is within "the method: parseCsvData(java.lang.String)" and the code surrounding the error is:
```java
          parsed.add(Tile.EMPTY);
        } else {
          parsed.add(new Tile(tileId));
        }
      }

    } catch (IOException e) {
      throw new InvalidTileLayerException(e);
    }

    return parsed;
  }

  protected static List<Tile> parseCsvData(@Nullable String value)
      throws InvalidTileLayerException {

    List<Tile> parsed = new ArrayList<>();

    // trim 'space', 'tab', 'newline'. pay attention to additional unicode chars
    // like \u2028, \u2029, \u0085 if necessary
    String[] csvTileIds = value.trim().split("[\\s]*,[\\s]*");

    for (String gid : csvTileIds) {
      int tileId;
      try {
        tileId = Integer.parseUnsignedInt(gid);
      } catch (NumberFormatException e) {
        throw new InvalidTileLayerException(e);
      }

      if (tileId > Integer.MAX_VALUE) {
        parsed.add(new Tile(tileId));
      } else {
        if (tileId == Tile.NONE) {
          parsed.add(Tile.EMPTY);
        } else {
          parsed.add(new Tile(tileId));
        }
      }
    }

    return parsed;
```

Give me the fixed code snippet (ONLY THE METHOD REWRITE OF "parseCsvData(java.lang.String)") in XML format in <response> tag like the example below. I will apply the fix to my codebase.
Do not import any additional libraries or classes or java comments.
If you can provide the fixed code snippet, provide it in the following format and place the code snippet in the <code> tag within ```java block.
<response>
  <success>true</success>
  <code><![CDATA[
  ```java
  Your fixed code snippet here
  ```
    ]]>
  </code>
</response>

11:41:25.927 TRACE edu.ucr.cs.riple.core.checkers.nullaway.codefix.ChatGPT.ask
Retrieving response from cache
11:41:25.927 TRACE edu.ucr.cs.riple.core.checkers.nullaway.codefix.Response.tryCreate
Trying to create Response:
Here's the fixed code snippet in the specified XML format, addressing the nullability issue raised by NullAway:

```xml
<response>
  <success>true</success>
  <code><![CDATA[
  ```java
  protected static List<Tile> parseCsvData(String value)
      throws InvalidTileLayerException {

    List<Tile> parsed = new ArrayList<>();

    if (value != null) {
      String[] csvTileIds = value.trim().split("[\\s]*,[\\s]*");

      for (String gid : csvTileIds) {
        int tileId;
        try {
          tileId = Integer.parseUnsignedInt(gid);
        } catch (NumberFormatException e) {
          throw new InvalidTileLayerException(e);
        }

        if (tileId > Integer.MAX_VALUE) {
          parsed.add(new Tile(tileId));
        } else {
          if (tileId == Tile.NONE) {
            parsed.add(Tile.EMPTY);
          } else {
            parsed.add(new Tile(tileId));
          }
        }
      }
    }

    return parsed;
  }
  ```
    ]]>
  </code>
</response>
```
11:41:25.928 TRACE edu.ucr.cs.riple.core.checkers.nullaway.codefix.Response.<init>
Creating Response:
Here's the fixed code snippet in the specified XML format, addressing the nullability issue raised by NullAway:

```xml
<response>
  <success>true</success>
  <code><![CDATA[
  ```java
  protected static List<Tile> parseCsvData(String value)
      throws InvalidTileLayerException {

    List<Tile> parsed = new ArrayList<>();

    if (value != null) {
      String[] csvTileIds = value.trim().split("[\\s]*,[\\s]*");

      for (String gid : csvTileIds) {
        int tileId;
        try {
          tileId = Integer.parseUnsignedInt(gid);
        } catch (NumberFormatException e) {
          throw new InvalidTileLayerException(e);
        }

        if (tileId > Integer.MAX_VALUE) {
          parsed.add(new Tile(tileId));
        } else {
          if (tileId == Tile.NONE) {
            parsed.add(Tile.EMPTY);
          } else {
            parsed.add(new Tile(tileId));
          }
        }
      }
    }

    return parsed;
  }
  ```
    ]]>
  </code>
</response>
```
11:41:25.928 TRACE edu.ucr.cs.riple.core.checkers.nullaway.codefix.Response.<init>
Response created:
protected static List<Tile> parseCsvData(String value)
      throws InvalidTileLayerException {

    List<Tile> parsed = new ArrayList<>();

    if (value != null) {
      String[] csvTileIds = value.trim().split("[\\s]*,[\\s]*");

      for (String gid : csvTileIds) {
        int tileId;
        try {
          tileId = Integer.parseUnsignedInt(gid);
        } catch (NumberFormatException e) {
          throw new InvalidTileLayerException(e);
        }

        if (tileId > Integer.MAX_VALUE) {
          parsed.add(new Tile(tileId));
        } else {
          if (tileId == Tile.NONE) {
            parsed.add(Tile.EMPTY);
          } else {
            parsed.add(new Tile(tileId));
          }
        }
      }
    }

    return parsed;
  }
