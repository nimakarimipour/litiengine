====================
Type='DEREFERENCE_NULLABLE', message='dereferenced expression dimg is @Nullable'
/home/nima/Developer/nullness-benchmarks/litiengine/src/de/gurkenlabs/litiengine/util/Imaging.java:396
    final Graphics2D g = dimg.createGraphics();
Log:
---NullAway.lambda$resolveRemainingErrors$17---
==============================
---NullAway.lambda$resolveRemainingErrors$17---
TOP LEVEL CALL TO FIX ERROR: Type='DEREFERENCE_NULLABLE', message='dereferenced expression dimg is @Nullable'
/home/nima/Developer/nullness-benchmarks/litiengine/src/de/gurkenlabs/litiengine/util/Imaging.java:396
    final Graphics2D g = dimg.createGraphics();
---ChatGPT.ask---
Asking ChatGPT:
I want to resolve a warning reported by NullAway.
The error is of the type of "DEREFERENCE_NULLABLE" and the full error message is: "dereferenced expression dimg is @Nullable".
The line with the error is: "    final Graphics2D g = dimg.createGraphics();".

The error is within "the method: verticalFlip(java.awt.image.BufferedImage)" and the code surrounding the error is:
```java
    final Graphics2D g = dimg.createGraphics();
    g.drawImage(img, 0, 0, w, h, w, 0, 0, h, null);
    g.dispose();
    return dimg;
  }

  /**
   * Flips the specified image vertically.
   *
   * @param img The image to be flipped.
   * @return The flipped image.
   */
  public static BufferedImage verticalFlip(final BufferedImage img) {
    final int w = img.getWidth();
    final int h = img.getHeight();
    if (w == 0 || h == 0) {
      return img;
    }

    final BufferedImage dimg = getCompatibleImage(w, h);
    final Graphics2D g = dimg.createGraphics();
    g.drawImage(img, 0, 0 + h, w, -h, null);
    g.dispose();
    return dimg;
  }

  /**
   * Replace colors in an image according to a Map containing source colors and target colors, then
   * return the result.
   *
   * @param bufferedImage the original image
   * @param colorMappings a Map with source colors as keys and target colors as values
   * @return a new version of the original image, where the source colors are replaced with the
   *     target colors.
   */
  public static BufferedImage replaceColors(
      final BufferedImage bufferedImage, Map<Color, Color> colorMappings) {
    BufferedImage recoloredImage = copy(bufferedImage);
    for (Entry<Color, Color> c : colorMappings.entrySet()) {
      for (int y = 0; y < recoloredImage.getHeight(); y++) {
```

Give me the fixed code snippet (ONLY THE METHOD REWRITE OF "verticalFlip(java.awt.image.BufferedImage)") in XML format in <response> tag like the example below. I will apply the fix to my codebase.
Do not import any additional libraries or classes or java comments.
If you can provide the fixed code snippet, provide it in the following format and place the code snippet in the <code> tag within ```java block.
<response>
  <success>true</success>
  <code><![CDATA[
  ```java
  Your fixed code snippet here
  ```
    ]]>
  </code>
</response>

---ChatGPT.sendRequestToOpenAI---
Sending request to OpenAI...
---ChatGPT.sendRequestToOpenAI---
Response received from OpenAI.
---Response.<init>---
Creating Response:
```xml
<response>
  <success>true</success>
  <code><![CDATA[
  ```java
  public static BufferedImage verticalFlip(final BufferedImage img) {
    final int w = img.getWidth();
    final int h = img.getHeight();
    if (w == 0 || h == 0) {
      return img;
    }

    final BufferedImage dimg = getCompatibleImage(w, h);
    if (dimg == null) {
      return img;
    }
    
    final Graphics2D g = dimg.createGraphics();
    g.drawImage(img, 0, 0 + h, w, -h, null);
    g.dispose();
    return dimg;
  }
  ```
    ]]>
  </code>
</response>
```
---Response.<init>---
Response created:
public static BufferedImage verticalFlip(final BufferedImage img) {
    final int w = img.getWidth();
    final int h = img.getHeight();
    if (w == 0 || h == 0) {
      return img;
    }

    final BufferedImage dimg = getCompatibleImage(w, h);
    if (dimg == null) {
      return img;
    }
    
    final Graphics2D g = dimg.createGraphics();
    g.drawImage(img, 0, 0 + h, w, -h, null);
    g.dispose();
    return dimg;
  }
