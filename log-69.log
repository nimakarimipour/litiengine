====================
Type='DEREFERENCE_NULLABLE', message='dereferenced expression this.collisionEntities.get(type) is @Nullable'
/home/nima/Developer/nullness-benchmarks/litiengine/src/de/gurkenlabs/litiengine/physics/PhysicsEngine.java:695
              this.collisionEntities.get(type).stream()
Log:
11:43:12.412 TRACE edu.ucr.cs.riple.core.checkers.nullaway.NullAway.lambda$resolveRemainingErrors$19
==============================
11:43:12.412 TRACE edu.ucr.cs.riple.core.checkers.nullaway.NullAway.lambda$resolveRemainingErrors$19
CHATGPT.COUNT = 1
11:43:12.412 TRACE edu.ucr.cs.riple.core.checkers.nullaway.NullAway.lambda$resolveRemainingErrors$19
CHATGPT.PROMPTS SIZE = 1
11:43:12.412 TRACE edu.ucr.cs.riple.core.checkers.nullaway.NullAway.lambda$resolveRemainingErrors$19
Both set to 0 and cleared 0
11:43:12.413 TRACE edu.ucr.cs.riple.core.checkers.nullaway.NullAway.lambda$resolveRemainingErrors$19
69 : TOP LEVEL CALL TO FIX ERROR: Type='DEREFERENCE_NULLABLE', message='dereferenced expression this.collisionEntities.get(type) is @Nullable'
/home/nima/Developer/nullness-benchmarks/litiengine/src/de/gurkenlabs/litiengine/physics/PhysicsEngine.java:695
              this.collisionEntities.get(type).stream()
11:43:13.937 TRACE edu.ucr.cs.riple.core.checkers.nullaway.codefix.ChatGPT.ask
Asking ChatGPT:
I want to resolve a warning reported by NullAway.
The error is of the type of "DEREFERENCE_NULLABLE" and the full error message is: "dereferenced expression this.collisionEntities.get(type) is @Nullable".
The line with the error is: "              this.collisionEntities.get(type).stream()".

The error is within "the method: update()" and the code surrounding the error is:
```java
    final Point2D newPosition = GeometricUtilities.project(entity.getLocation(), target, distance);
    return this.move(entity, newPosition);
  }

  /**
   * Clears all collision boxes registered on the {@code PhysicsEngine} once per tick and re-adds
   * them with their updated positions.
   */
  @Override
  public void update() {
    // retrieve all collision box rectangles once per update
    for (Collision type : Collision.values()) {
      if (type == Collision.NONE) {
        continue;
      }

      this.collisionBoxes.get(type).clear();
      this.collisionBoxes
          .get(type)
          .addAll(
              this.collisionEntities.get(type).stream()
                  .map(ICollisionEntity::getCollisionBox)
                  .collect(Collectors.toList()));
    }
  }

  /**
   * Checks if two entities can collide
   *
   * @param entity The first entity to check for collision
   * @param otherEntity The second entity to check for collision
   * @return {@code true} if the entities can collide, {@code false} otherwise.
   */
  private static boolean canCollide(
      @Nullable ICollisionEntity entity, ICollisionEntity otherEntity) {
    if (otherEntity == null || !otherEntity.hasCollision()) {
      return false;
    }

    // the entity to check against is not provided
```

Give me the fixed code snippet (ONLY THE METHOD REWRITE OF "update()") in XML format in <response> tag like the example below. I will apply the fix to my codebase.
Do not import any additional libraries or classes or java comments.
If you can provide the fixed code snippet, provide it in the following format and place the code snippet in the <code> tag within ```java block.
<response>
  <success>true</success>
  <code><![CDATA[
  ```java
  Your fixed code snippet here
  ```
    ]]>
  </code>
</response>

11:43:13.938 TRACE edu.ucr.cs.riple.core.checkers.nullaway.codefix.ChatGPT.ask
Retrieving response from cache
11:43:13.938 TRACE edu.ucr.cs.riple.core.checkers.nullaway.codefix.Response.tryCreate
Trying to create Response:
```xml
<response>
  <success>true</success>
  <code><![CDATA[
  ```java
  @Override
  public void update() {
    for (Collision type : Collision.values()) {
      if (type == Collision.NONE) {
        continue;
      }

      if (this.collisionEntities.get(type) != null) {
        this.collisionBoxes.get(type).clear();
        this.collisionBoxes
            .get(type)
            .addAll(
                this.collisionEntities.get(type).stream()
                    .map(ICollisionEntity::getCollisionBox)
                    .collect(Collectors.toList()));
      }
    }
  }
  ```
  ]]>
  </code>
</response>
```
11:43:13.939 TRACE edu.ucr.cs.riple.core.checkers.nullaway.codefix.Response.<init>
Creating Response:
```xml
<response>
  <success>true</success>
  <code><![CDATA[
  ```java
  @Override
  public void update() {
    for (Collision type : Collision.values()) {
      if (type == Collision.NONE) {
        continue;
      }

      if (this.collisionEntities.get(type) != null) {
        this.collisionBoxes.get(type).clear();
        this.collisionBoxes
            .get(type)
            .addAll(
                this.collisionEntities.get(type).stream()
                    .map(ICollisionEntity::getCollisionBox)
                    .collect(Collectors.toList()));
      }
    }
  }
  ```
  ]]>
  </code>
</response>
```
11:43:13.939 TRACE edu.ucr.cs.riple.core.checkers.nullaway.codefix.Response.<init>
Response created:
@Override
  public void update() {
    for (Collision type : Collision.values()) {
      if (type == Collision.NONE) {
        continue;
      }

      if (this.collisionEntities.get(type) != null) {
        this.collisionBoxes.get(type).clear();
        this.collisionBoxes
            .get(type)
            .addAll(
                this.collisionEntities.get(type).stream()
                    .map(ICollisionEntity::getCollisionBox)
                    .collect(Collectors.toList()));
      }
    }
  }
